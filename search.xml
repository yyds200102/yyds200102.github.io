<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVASE(二):类和对象</title>
      <link href="/2021/06/21/JavaSE/JavaSE%20(%20%E4%BA%8C%20)%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/06/21/JavaSE/JavaSE%20(%20%E4%BA%8C%20)%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="1、类和对象概念"><a href="#1、类和对象概念" class="headerlink" title="1、类和对象概念"></a>1、类和对象概念</h2><h3 id="1-1、面向对象与面向过程"><a href="#1-1、面向对象与面向过程" class="headerlink" title="1.1、面向对象与面向过程"></a>1.1、面向对象与面向过程</h3><p><strong>面向对象与面向过程</strong></p><ul><li>面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。</li><li>面向对象，<code>将功能封装进对象</code>，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</li></ul><p><strong>面向对象三大特征：</strong></p><ul><li>封装</li><li>继承</li><li>多态</li></ul><p><strong>面向对象思想：</strong>程序员从面向过程的执行者转化成了面向对象的指挥者</p><h3 id="1-2、类"><a href="#1-2、类" class="headerlink" title="1.2、类"></a>1.2、类</h3><p><strong>概念：</strong>构造对象的模板和蓝图，由类构造对象的过程成为<strong>创建类的实例</strong></p><p><strong>封装：</strong>又成为<strong>数据隐藏</strong>，是处理对象的一个重要概念。就是把数据和行为组合在一起，并对对象的使用者隐藏起来，只提供一个接口让使用者操作。对象的数据称为实例字段，操作数据的过程称为方法。、</p><h3 id="1-3、对象"><a href="#1-3、对象" class="headerlink" title="1.3、对象"></a>1.3、对象</h3><ul><li>对象的行为：对象的各种方法</li><li>对象的状态：每个对象的字段的得集合就是<strong>对象的状态</strong></li><li>对象的标识：</li></ul><h3 id="1-4、类之间的关系"><a href="#1-4、类之间的关系" class="headerlink" title="1.4、类之间的关系"></a>1.4、类之间的关系</h3><ul><li>依赖：类A对象需要调用类B对象的方法</li><li>聚合：类A对象包含一些类B的对象</li><li>继承：继承让多态得以提醒</li></ul><h3 id="1-5、分析对象与对象变量"><a href="#1-5、分析对象与对象变量" class="headerlink" title="1.5、分析对象与对象变量"></a>1.5、分析对象与对象变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Date deadline;                     <span class="comment">// 此时deadline不是一个对象</span></span><br><span class="line">Date birthday = <span class="keyword">new</span> Date();        <span class="comment">// 通过new构造对象</span></span><br><span class="line">deadline = birthday;               <span class="comment">// 通过引用构造对象</span></span><br><span class="line"><span class="comment">// 此时二者是一个对象，hashcode相同</span></span><br><span class="line">System.out.println(deadline.hashCode());</span><br><span class="line">System.out.println(birthday.hashCode());</span><br></pre></td></tr></table></figure><ul><li>通过上面可以认识到，<strong>对象变量只是引用了一个对象</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deadline = <span class="keyword">null</span>;            <span class="comment">// 此时没有引用任何对象</span></span><br><span class="line">System.out.println(deadline.hashCode());   <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure><h2 id="2、类和对象的使用"><a href="#2、类和对象的使用" class="headerlink" title="2、类和对象的使用"></a>2、类和对象的使用</h2><h3 id="2-1、构造器"><a href="#2-1、构造器" class="headerlink" title="2.1、构造器"></a>2.1、构造器</h3><ul><li>构造对象需要<strong>调用构造器</strong>（默认有一个无参构造）</li><li>构造器必须配合new来使用，与类同名</li><li>构造器没有参数限制，没有返回值</li></ul><h3 id="2-2、属性"><a href="#2-2、属性" class="headerlink" title="2.2、属性"></a>2.2、属性</h3><ul><li><strong>属性分为成员变量和局部变量</strong></li></ul><table><thead><tr><th></th><th><strong>成员变量</strong></th><th><strong>局部变量</strong></th></tr></thead><tbody><tr><td>声明的位置</td><td>直接声明在类中</td><td>方法形参或内部、代码块内、构造器内等</td></tr><tr><td>修饰符</td><td>用权限修饰符修饰</td><td>只能使用final</td></tr><tr><td>初始化值</td><td>有默认值</td><td>没有默认值</td></tr><tr><td>内存加载位置</td><td><strong>堆空间或静态域内</strong></td><td><strong>栈空间</strong></td></tr></tbody></table><blockquote><p>用Var定义局部变量</p></blockquote><ul><li>Java10中，若可以从初始值推断类型，则可以使用var来修饰</li><li>var只能使用于<strong>方法中的局部变量</strong></li></ul><blockquote><p>使用Null引用</p></blockquote><ul><li>使用Null表示没有引用对象，如果调用类方法就会<strong>产生NullPointerException异常</strong></li><li>上述的name为String对象，若传进来的值为null，则会触发异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Employee employee = <span class="keyword">new</span> Employee(<span class="keyword">null</span>,<span class="number">75000</span>,<span class="number">1987</span>,<span class="number">12</span>,<span class="number">15</span>);</span><br><span class="line">System.out.println(employee.getName().length());</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、构造器加入判断</span></span><br><span class="line"><span class="keyword">if</span>(name==<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2、拒绝创建null</span></span><br><span class="line"><span class="keyword">this</span>.name = Objects.requireNonNull(name,<span class="string">&quot;不允许null&quot;</span>);</span><br><span class="line"><span class="comment">// 3、类似1</span></span><br><span class="line"><span class="keyword">this</span>.name = Objects.requireNonNullElse(name,<span class="string">&quot;unknown&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-3、方法"><a href="#2-3、方法" class="headerlink" title="2.3、方法"></a>2.3、方法</h3><blockquote><p>定义</p></blockquote><ul><li>方法是类或对象<strong>行为特征的抽象</strong>，用来完成某个功能操作。</li><li>方法中只能调用方法或属性，不可以在方法内部定义方法。</li></ul><blockquote><p>参数传递机制</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> raise = salary * byPercent /<span class="number">100</span>;</span><br><span class="line">    salary = salary + raise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>显式参数：byPercent 即括号里的参数</li><li>隐式参数：调用这个方法的对象，salary 等于 employee.salary</li></ul><blockquote><p>参数传递机制</p></blockquote><p>Java里方法的<strong>参数传递</strong>方式只有一种：值传递。 </p><ul><li>将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。 <ul><li>基本数据类型：传递值</li><li>引用数据类型：传递地址值</li></ul></li></ul><blockquote><p>方法重载</p></blockquote><ul><li>概念：允许存在一个以上的<strong>同名方法</strong>，只要它们的参数个数或者参数类型不同即可，static和非static之间不能构成重载</li><li>特点：<strong>与返回值类型无关</strong>，仅仅返回值类型不同算一个方法。</li><li><strong>所以，参数和方法名构成了一个方法的签名</strong></li></ul><blockquote><p>可变参数</p></blockquote><ul><li>Java1.5之后，支持传递同类型的可变参数给一个方法</li><li>在方法声明中，在指定参数类型后加一个省略号(…)</li><li>一个方法只能指定一个可变参数，且必须放在最后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>...nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            System.out.println(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.print(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>访问器方法和更改器方法</p></blockquote><ul><li>更改器方法：改变</li><li>访问器方法：不改变原来类的结构</li></ul><h3 id="2-4、this关键字"><a href="#2-4、this关键字" class="headerlink" title="2.4、this关键字"></a>2.4、this关键字</h3><ol><li>方法内部使用，即这个方法所属对象的引用</li><li>构造器内部使用，表示该构造器<code>正在初始化</code>的对象</li><li>可以用this来区分<code>属性和局部变量</code></li></ol><p><strong>注意：</strong></p><ol><li>在构造器里面使用this关键字调用<strong>其他构造器</strong>，但只能声明一个，参考上面的内容</li><li>this调用其他构造器的代码，必须声明在<strong>类的构造器的首行</strong></li></ol><h3 id="2-5、final"><a href="#2-5、final" class="headerlink" title="2.5、final"></a>2.5、final</h3><ul><li>成员变量定义为final之后，可以通过构造器赋予值，之后不能再修改</li><li><strong>final方法可以被重载</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6、static"><a href="#2-6、static" class="headerlink" title="2.6、static"></a>2.6、static</h3><p><strong>静态字段：</strong>被static修饰的静态字段，将不再属于某个对象，而是属于类被共享，<strong>可以同时被类和对象调用</strong></p><p>注意：Java叫做类字段，静态字段只是沿用了C++的叫法</p><p><strong>静态常量：</strong></p><p><strong>静态方法：</strong>同上，静态方法常用于工厂方法的实现，main方法也是一个静态方法，<strong>只能被类调用而无法被对象调用</strong>，由于独立于方法，所以不能使用this和super</p><h3 id="2-7、代码块"><a href="#2-7、代码块" class="headerlink" title="2.7、代码块"></a>2.7、代码块</h3><p>三种初始化数据字段的方法</p><ul><li>构造器设置值</li><li>声明中赋值</li><li>初始化块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Block block = <span class="keyword">new</span> Block();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">初始化块</span><br><span class="line">构造器方法</span><br></pre></td></tr></table></figure><p>构造器被调用后，会先判断是否调用了其他构造器</p><ul><li>若调用了，则转到另一个构造器执行</li><li>若没调用，<strong>先调用初始化块，在调用构造器剩下的部分</strong></li></ul><p><strong>静态代码块：</strong>优先于类的构造，<strong>只能对静态成员变量初始化</strong>，从上而下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//static代码块通常用于初始化static的属性</span><br><span class="line">static &#123;</span><br><span class="line">total = 100;//为total赋初值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>初始化顺序</p></blockquote><ol><li>声明成员变量的默认初始化</li><li>显式初始化、多个初始化块依次被执行（同级别下按先后顺序执行）</li><li>构造器再对成员进行初始化操作</li><li>通过”对象.属性”或”对象.方法”的方式，可多次给属性赋值</li></ol><h3 id="2-8、对象析构和finalize方法"><a href="#2-8、对象析构和finalize方法" class="headerlink" title="2.8、对象析构和finalize方法"></a>2.8、对象析构和finalize方法</h3><ul><li>Java会自动垃圾回收，所以Java不支持析构（构造器内放清理代码）</li><li>finalize方法用于释放资源，已经废弃，应该使用Java提供的各种类的close方法</li></ul><h2 id="3、类的继承"><a href="#3、类的继承" class="headerlink" title="3、类的继承"></a>3、类的继承</h2><h3 id="3-1、子类"><a href="#3-1、子类" class="headerlink" title="3.1、子类"></a>3.1、子类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Manage类继承了Employee类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manage</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>extends表明正在构造的新类派生于一个已经存在的类</li><li>已存在的类称为超类（基类或者父类），新类称为子类</li></ul><p>注意点：</p><ul><li>子类继承了父类的私有属性和方法，但是<strong>不能直接调用，可以间接调用</strong>（父类公有方法调用到了父类的私有属性和方法），也继承了父类的父类</li><li>子类可以通过 super() 调用父类方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类私有，只提供一个公有的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        printName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类调用方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manage</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manage</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试，成功输出</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Manage manage = <span class="keyword">new</span> Manage(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    manage.print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、重写方法"><a href="#3-2、重写方法" class="headerlink" title="3.2、重写方法"></a>3.2、重写方法</h3><p>可以看到，上面例子中子类父类的print方法名一致，这样就是重写方法</p><p><strong>重写规则</strong></p><ul><li><p>方法必须具有相同的<strong>名称和参数</strong></p></li><li><p>返回值类型要比父类的小</p></li><li><p><strong>访问权限要比父类的高或者相等</strong></p></li><li><p>抛出的异常不能比父类的更大</p></li><li><p>无法重写static方法，因为static方法是类方法，不是成员方法</p></li><li><p>无法重写私有方法</p></li></ul><h3 id="3-3、子类构造器"><a href="#3-3、子类构造器" class="headerlink" title="3.3、子类构造器"></a>3.3、子类构造器</h3><p><strong>注意：子类初始化，必须提供父类构造的实现</strong>，几种调用方式如下</p><ul><li>父类含有无参构造时：会自动调用父类构造方法</li><li>父类不含无参构造时，子类必须调用super() 来调用父类构造方法</li><li>调用本类的其他构造方法，但是最终一定也要调用到父类构造方法</li></ul><p><strong>注意点：</strong></p><ul><li><strong>子类对象实例化时不会实例化父类对象</strong></li><li>构造器只能被调用，不能被继承</li><li>Java不支持多重继承，只支持多实现接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manage</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manage</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用其他构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、多态与类型转换"><a href="#3-4、多态与类型转换" class="headerlink" title="3.4、多态与类型转换"></a>3.4、多态与类型转换</h3><p><strong>对象类型转换</strong></p><ol><li>向上转型：父类的引用指向子类的对象</li><li>向下转型：子类的引用指向父类的对象（必须强制转换）</li></ol><p><strong>多态原理：</strong>父类的引用指向子类的对象（向上转型）</p><p><strong>引用变量类型分类：</strong></p><ul><li>编译时类型：编译时类型由声明该变量时使用的类型决定</li><li>运行时类型：运行时类型由实际赋给该变量的对象决定</li><li>编译型和运行型和不一致就导致了多态</li></ul><p><strong>注意：</strong></p><ol><li>向上转型后的父类对象 调用的是<strong>子类重载的方法</strong></li><li>向上转型后的父类对象 的其他方法和属性<strong>都是父类的</strong></li><li>本质上还是父类对象，只是方法替换成子类的</li><li><strong>向上转型是允许的、安全的，因为子类必定包含父类的所有属性和方法</strong></li><li><strong>向下转型是不安全的，因为子类含有父类不包含的属性和方法</strong>，所以需要强制转换，而且转型前需要使用instanceof进行判断</li></ol><p><strong>instanceof操作符</strong>：</p><ul><li>x instanceof A：检验x是否是A的对象或者是A<code>后代</code>的对象</li><li>向下转型时先判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据传进来的参数判断是猫还是狗</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;猫&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;狗&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat(<span class="string">&quot;猫&quot;</span>);</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog(<span class="string">&quot;狗&quot;</span>);</span><br><span class="line">        Animal animal= <span class="keyword">new</span> Cat(<span class="string">&quot;动物&quot;</span>);</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.check(cat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组对象</p></blockquote><ul><li>数组对象向上转型可以会出现一些问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Employee[] employees = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line">        Manage[] manages = <span class="keyword">new</span> Manage[<span class="number">3</span>];</span><br><span class="line">        <span class="comment">// 子类引用指向父类对象</span></span><br><span class="line">        employees = manages;</span><br><span class="line">        <span class="comment">// 注意此时父类子类引用同一个，相当于父类对象指向子类而没有强转，报错</span></span><br><span class="line">        employees[<span class="number">0</span>] = <span class="keyword">new</span> Employee(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        manages[<span class="number">0</span>].print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5、方法"><a href="#3-5、方法" class="headerlink" title="3.5、方法"></a>3.5、方法</h3><p><strong>通过子类的对象调用 a 方法，</strong></p><ol><li>编译器会列举所有 方法名为a，且可以访问的方法（不包括父类私有方法，注意修饰符不同的方法也不构成重载）</li><li>编译器重载解析：寻找一个与<strong>所提供的参数的类型完全匹配</strong>的方法</li><li>若发现找不到或者找到多个方法，就会报错</li></ol><p><strong>方法的签名：</strong>方法的名字和参数构成方法的签名，与返回值无关</p><ul><li>子类定义与父类签名一致的方法，则会覆盖父类的方法</li><li>签名一致的方法必须保证方法<strong>相容</strong>，不然就是语法错误</li><li>同一个类的方法签名一致，则会报错</li></ul><p><strong>方法的重写：</strong>子类覆盖父类的方法，注意<strong>无法覆盖static方法</strong></p><p><strong>方法相容规则</strong>：</p><ul><li>子类覆盖的方法返回值必须为父类的<strong>返回值或返回值的子类型</strong></li><li>子类的方法的访问权限不能小于父类的，不能重写private方法</li><li>子类方法抛出的异常不能大于父类被重写方法的异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法重载，这种写法报错</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Manage <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Manage(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Employee(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写方法，这种写法可以，因为Manage是Employee的子类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Manage(<span class="string">&quot;父类&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Manage <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Manage(<span class="string">&quot;子类&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态绑定与静态绑定</strong></p><ul><li>静态绑定：private、final、static方法，编译器会准确知道是什么方法</li><li>动态绑定：一般方法，虚拟机每次从子类寻找，找不到再从超类找，</li></ul><blockquote><p>虚拟机方法表</p></blockquote><p>虚拟机每次从子类寻找，找不到再从超类找，这样资源消耗过大</p><p>因此虚拟机定义了一个方法表，列出来<strong>所有方法的签名和要调用的实际方法</strong></p><h3 id="3-6、final"><a href="#3-6、final" class="headerlink" title="3.6、final"></a>3.6、final</h3><ul><li>final属性通过构造器赋值后就不能修改了</li><li>final类不能被继承</li><li>final方法不能被重写</li><li>final方法可以被重载</li></ul><h3 id="3-7、抽象类"><a href="#3-7、抽象类" class="headerlink" title="3.7、抽象类"></a>3.7、抽象类</h3><ul><li>抽象类：用abstract关键字来修饰一个类，这个类叫做抽象类。 </li><li>抽象方法：用abstract来修饰一个方法，该方法叫做抽象方法。</li></ul><p><strong>注意点：</strong></p><ul><li>抽象类可以不含抽象方法，含抽象方法的一定是抽象类</li><li>抽象类不能用new来实例化，只能被单继承，<strong>继承的类必须实现所有方法，不然只能继续定义为抽象类</strong></li><li>抽象类可以<strong>通过子类</strong>向上转型的方式<strong>实例化</strong></li><li><strong>抽象类相比于正常的类只是可能含有抽象方法</strong>，其他完全一致</li></ul><h3 id="3-8、访问权限修饰符"><a href="#3-8、访问权限修饰符" class="headerlink" title="3.8、访问权限修饰符"></a>3.8、访问权限修饰符</h3><table><thead><tr><th>修饰符</th><th>作用</th><th>范围</th></tr></thead><tbody><tr><td>default(即什么也不写）</td><td>在同一包内可见</td><td>类、接口、变量、方法</td></tr><tr><td>private</td><td>在同一类内可见</td><td>变量、方法</td></tr><tr><td>public</td><td>对所有类可见</td><td>类、接口、变量、方法</td></tr><tr><td>protected</td><td>对同一包内的类和所有子类可见</td><td>变量、方法</td></tr></tbody></table><h2 id="4、Object类"><a href="#4、Object类" class="headerlink" title="4、Object类"></a>4、Object类</h2><p><strong>Object类：</strong></p><ul><li><p>Object类是所有Java类的根父类</p></li><li><p>如果在类的声明中未使用extends关键字指明其父类，则默认父类为Object类</p></li><li><p>Object类可以引用任何对象</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object object = new Employee(&quot;Tom&quot;);</span><br></pre></td></tr></table></figure><p><strong>Object变量只能作为各种值的泛型容器</strong>，而且必须强制类型转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Employee employee = (Employee) object;</span><br></pre></td></tr></table></figure><p><strong>Object类API</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Object</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;  <span class="comment">// 唤醒线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span></span>;    <span class="comment">// 进入等待状态</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span></span>; <span class="comment">// 设置最大等待时间并等待</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">getClass</span><span class="params">()</span></span>;     <span class="comment">// 获得类对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">getSuperClass</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;     <span class="comment">// 返回类名</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>Objects类API</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title">requireNonNull</span><span class="params">(T obj)</span>     <span class="comment">// 查看指定对象是否为空</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashcode</span><span class="params">(Object a)</span>          <span class="comment">// null返回0，否则返回hashcode</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashcode</span><span class="params">(Object... objects)</span> <span class="comment">// 返回hascode组合      </span></span></span><br></pre></td></tr></table></figure><p>== ：</p><ul><li>基本数据类型比较值</li><li>引用数据类型比较地址（即是否指向同一个对象）</li></ul><p>equals：</p><ul><li>只比较引用数据类型，比较地址</li><li>String类的equals 重写了，比较的是值</li></ul><h2 id="5、包装类与自动装箱"><a href="#5、包装类与自动装箱" class="headerlink" title="5、包装类与自动装箱"></a>5、包装类与自动装箱</h2><p><strong>包装类：</strong>对八种基本数据类型定义相应的引用类型—包装类（封装类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 包装类对象的属性是不可以变化的</span></span><br><span class="line">Integer integer = <span class="keyword">new</span> Integer(<span class="number">3</span>); <span class="comment">// 这种形式在Java9废弃了</span></span><br><span class="line">System.out.println(integer.hashCode());</span><br><span class="line">integer = <span class="number">5</span>;</span><br><span class="line">System.out.println(integer.hashCode());</span><br></pre></td></tr></table></figure><p><strong>装箱：</strong>基本数据类型包装成包装类的实例，<strong>如上述就是自动把5装箱</strong></p><p><strong>拆箱：</strong>包装类变成基本数据类型</p><p>注意：</p><ul><li>JDK1.5之后，支持自动装箱和自动拆箱，只要类型匹配</li><li>由于包装类是对象，所以可以为null，因此可能会出现异常</li><li>条件表示式里面混用Integer和Double类型，Integer会拆箱成int，然后转换成double，再装箱成Double</li><li><strong>自动装箱和自动拆箱是编译器优化的结果，而非虚拟机做的事情</strong></li></ul><blockquote><p>Integer类API</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i)</span></span>;     <span class="comment">// 转换成字符串</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> radix)</span></span>;  <span class="comment">// 以radix进制显示的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s)</span></span>;          </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s,<span class="keyword">int</span> radix)</span></span>; <span class="comment">// radix进制字符串转换成int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> Integer <span class="title">ValueOf</span><span class="params">(String s)</span></span>;        <span class="comment">// 字符串转换成Integer</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Integer <span class="title">ValueOf</span><span class="params">(String s,<span class="keyword">int</span> radix)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Integer <span class="title">ValueOf</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>面试题</p></blockquote><p>1、一个表达式里面，结果会变成精度最大的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Object o1 = <span class="keyword">true</span> ? <span class="keyword">new</span> Integer(<span class="number">1</span>) : <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">    System.out.println(o1);    <span class="comment">// 输出1.0</span></span><br><span class="line">    Object o2;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span>)</span><br><span class="line">        o2 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        o2 = <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">    System.out.println(o2);     <span class="comment">// 输出1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">    Integer j = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">    System.out.println(i == j);   <span class="comment">// 不同对象</span></span><br><span class="line">    Integer m = <span class="number">1</span>;</span><br><span class="line">    Integer n = <span class="number">1</span>;</span><br><span class="line">    System.out.println(m == n);   </span><br><span class="line">    <span class="comment">// 创建的是同一个对象，这些对象已经缓存在IntegerCache里面了，因此相等</span></span><br><span class="line">    Integer x = <span class="number">128</span>;</span><br><span class="line">    Integer y = <span class="number">128</span>;</span><br><span class="line">    System.out.println(x == y);   <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、枚举类"><a href="#6、枚举类" class="headerlink" title="6、枚举类"></a>6、枚举类</h2><ul><li>Java 枚举是一个<code>特殊的类</code>，一般表示一组常量，参数默认用<strong>public static final</strong> 修饰</li><li>枚举跟普通类一样可以有自己的变量、方法和构造函数，<strong>构造函数只能用private修饰</strong></li></ul><h3 id="6-1、简单定义和使用"><a href="#6-1、简单定义和使用" class="headerlink" title="6.1、简单定义和使用"></a>6.1、简单定义和使用</h3><ul><li>枚举类是static修饰的，所以可以通过类或者对象获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span> </span>&#123; </span><br><span class="line">    RED, GREEN, BLUE; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Color.RED;               <span class="comment">// 直接获取</span></span><br><span class="line">Color c1 = Color.RED;    <span class="comment">// 赋给Color对象</span></span><br></pre></td></tr></table></figure><p><strong>以上的枚举类底层实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Color</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color RED = <span class="keyword">new</span> Color();  <span class="comment">// 枚举成员实际是一个对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color BLUE = <span class="keyword">new</span> Color();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color GREEN = <span class="keyword">new</span> Color();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>枚举类同样可以定义在一个类的内部：</strong></p><ul><li><p>本类访问：Color.BLUE;</p></li><li><p>其他类访问：外部类类名.Color.Blue</p></li></ul><h3 id="6-2、操作枚举元素"><a href="#6-2、操作枚举元素" class="headerlink" title="6.2、操作枚举元素"></a>6.2、操作枚举元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代枚举元素</span></span><br><span class="line"><span class="keyword">for</span> (Color myVar : Color.values()) &#123;</span><br><span class="line">System.out.println(myVar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在switch中使用枚举类</span></span><br><span class="line">Color myVar = Color.BLUE;</span><br><span class="line"><span class="keyword">switch</span>(myVar) &#123;</span><br><span class="line"><span class="keyword">case</span> RED:</span><br><span class="line">System.out.println(<span class="string">&quot;红色&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>API：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">values();    <span class="comment">// 把枚举类型的成员变量实例以数组形式返回  Color[] arr = Color.values(); </span></span><br><span class="line">valueof();   <span class="comment">// 普通字符串转换为枚举实例    Color.valueOf(&quot;Blue&quot;) == Color.Blue</span></span><br><span class="line">compareTo(); <span class="comment">// 比较两个枚举对象定义的顺序，参数里面在前返回1，后面返回0</span></span><br><span class="line">ordinal();   <span class="comment">// 获取某个对象位置的索引值，从0开始</span></span><br></pre></td></tr></table></figure><h3 id="6-3、带参的枚举类成员"><a href="#6-3、带参的枚举类成员" class="headerlink" title="6.3、带参的枚举类成员"></a>6.3、带参的枚举类成员</h3><p><strong>由于枚举类成员实际上是static final 修饰的类对象，所以可以带参数</strong>，但是</p><ul><li>构造函数只能用private修饰</li><li>由于是静态的，如下有四个枚举成员，当使用Season时，会初始化这四个对象，也就是<strong>调用四次私有构造方法</strong>，同理如Season含有抽象方法，四个对象都必须实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Season</span> </span>&#123;</span><br><span class="line"><span class="comment">// 实际上等于public static final Season SPRING = new Season(&quot;春天&quot;, &quot;春暖花开&quot;);</span></span><br><span class="line"><span class="comment">// 创建了Season的一个对象，并且调用private构造器</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春风又绿江南岸&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;映日荷花别样红&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋水共长天一色&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;窗含西岭千秋雪&quot;</span>);</span><br><span class="line"><span class="comment">// 私有变量，也是枚举成员的参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有构造方法，有四个枚举成员，所以实例化 Season时，该方法调用四次</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 因为是私有的变量，所以需要get方法获取参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName; </span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化Season时候，会调用 n 次构造方法，n为成员数</span></span><br><span class="line">        Season season = Season.AUTUMN;</span><br><span class="line">        season.getSeasonDesc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、反射"><a href="#7、反射" class="headerlink" title="7、反射"></a>7、反射</h2><h3 id="7-1、概述"><a href="#7-1、概述" class="headerlink" title="7.1、概述"></a>7.1、概述</h3><p><strong>反射：</strong>类加载器加载完类之后，堆里面就会生成<strong>一个Class类型的对象</strong>（一个类只有一个Class对象），这个对象包含类的<strong>完整信息</strong>，通过这个对象来访问类的过程就是反射</p><ul><li>正常方式： 引入包名—-&gt;new实例化——&gt;取得实例化对象</li><li>反射方式： 实例化对象—–&gt;getClass()方法——-&gt;得到完整的”包类”名称</li></ul><p><strong>反射用途：</strong></p><ul><li>运行时取得类的<strong>内部信息</strong>，</li><li>运行时检查对象，直接操作对象的内部属性和方法。</li><li>实现泛型数组操作代码</li></ul><h3 id="7-2、获取Class对象"><a href="#7-2、获取Class对象" class="headerlink" title="7.2、获取Class对象"></a>7.2、获取Class对象</h3><ul><li>在程序运行期间，Java运行时系统始终为所有对象维护一个<strong>运行时类型标识</strong>，这个信息会跟踪每个对象所属的类。虚拟机利用<strong>运行时类型信息</strong>选择要执行的正确的方法。</li><li><strong>保存这些信息</strong>的类名为Class，可以通过Class对象访问这些信息。</li></ul><p><strong>注意：</strong></p><ul><li>Class 对象只能由<strong>虚拟机建立对象</strong>，一个类只有一个Class对象，所以可以用==比较</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li></ul><p><strong>获取Class对象四种方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class c = User.class;           <span class="comment">// 通过类名,可以为基本数据类型 int.class</span></span><br><span class="line">Class c = user.getClass();      <span class="comment">// 通过对象</span></span><br><span class="line">Class c = Class.forName(<span class="string">&quot;com.xxx.reflection.User&quot;</span>);   <span class="comment">//通过类的全限定名</span></span><br><span class="line">Class c = <span class="keyword">int</span>.TYPE;             <span class="comment">// 通过包装类</span></span><br></pre></td></tr></table></figure><ul><li>Class类实际上是一个<strong>泛型类</strong>，可以是类，也可以不是类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际使用都是省略类型</span></span><br><span class="line">Class&lt;User&gt; userClass = User.class;</span><br><span class="line">Class&lt;Integer&gt; integerClass = <span class="keyword">int</span>.class;</span><br></pre></td></tr></table></figure><ul><li>由于历史原因，数组输出获取名字会很奇怪</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(User[].class.getName());</span><br><span class="line">System.out.println(Integer.class.getName());</span><br><span class="line"></span><br><span class="line">[Lcom.wzh.反射.User;</span><br><span class="line">java.lang.Integer</span><br></pre></td></tr></table></figure><h3 id="7-3、获取资源"><a href="#7-3、获取资源" class="headerlink" title="7.3、获取资源"></a>7.3、获取资源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">URL <span class="title">getResourceAsStream</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">InputStream <span class="title">getResourceAsStream</span><span class="params">(String name)</span></span>;  <span class="comment">// 获取和类同一级的资源</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取类对象</span></span><br><span class="line">Class c1 = Test.class;</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">// 获取输入流</span></span><br><span class="line">InputStream in = c1.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line"><span class="comment">// 读取数据信息</span></span><br><span class="line">properties.load(in);</span><br><span class="line"><span class="comment">// 获取信息</span></span><br><span class="line">String name = properties.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(name);</span><br></pre></td></tr></table></figure><h3 id="7-4、操作类"><a href="#7-4、操作类" class="headerlink" title="7.4、操作类"></a>7.4、操作类</h3><p>Java.lang.reflect 包有3个类 Field、method、Constructor 分别获取属性、方法、构造器（不含父类的方法）</p><ul><li>获取类名，包名（Class对象方法）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>;              <span class="comment">// 获取包名 + 类名</span></span><br><span class="line"><span class="function">String <span class="title">getSimpleName</span><span class="params">()</span></span>;        <span class="comment">// 只获得类名</span></span><br><span class="line"><span class="function">String <span class="title">getPackageName</span><span class="params">()</span></span>;</span><br><span class="line">Class[] getInterfaces();       <span class="comment">// 获得接口</span></span><br></pre></td></tr></table></figure><ul><li> 获取Feild对象及FeildAPI</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Field对象</span></span><br><span class="line">Field[] getFields();               <span class="comment">// 获取public的类变量，返回数组</span></span><br><span class="line">Field[] getDeclaredFields();       <span class="comment">// 获取全部类变量，包括private</span></span><br><span class="line"></span><br><span class="line">Field[] getField(Strning name);</span><br><span class="line">Field[] getDeclaredField(Strning name);    <span class="comment">// 获取指定名称的 </span></span><br></pre></td></tr></table></figure><ul><li>获取method对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Method[] getMethods();              <span class="comment">// 获取public的method</span></span><br><span class="line">Method[] getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">Method[] getMethod(String name,String.class...);  <span class="comment">// 要指定方法名和参数的类型</span></span><br><span class="line">Method[] getDeclaredMethod(String name,<span class="keyword">null</span>);     <span class="comment">// 无参可以使用null或者不填</span></span><br></pre></td></tr></table></figure><ul><li>获取Constructor对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Constructor[] getConstructors();</span><br><span class="line">Constructor[] getDeclaredConstructors();</span><br><span class="line"></span><br><span class="line">Constructor[] getDeclaredConstructor(String.class...); <span class="comment">// 需要指定参数类型</span></span><br><span class="line">Constructor[] getConstructor();             <span class="comment">// 无参则不填</span></span><br></pre></td></tr></table></figure><p>三个类对象常用API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用</span></span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span>                   <span class="comment">// 返回的 Field对象表示的字段的名称。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span>         <span class="comment">// 比较这 Field与指定对象。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getModifiers</span><span class="params">()</span>                 <span class="comment">// 返回的 对构造器、方法、字段的修饰符的描述</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAccessible</span><span class="params">(<span class="keyword">boolean</span> b)</span></span>;     <span class="comment">// 操作私有的必须设置为true </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Field  </span></span><br><span class="line"><span class="function">Class <span class="title">getType</span><span class="params">()</span>                    <span class="comment">// 返回类型  </span></span></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(Object obj)</span>             <span class="comment">// 传入对象，获取该对象的属性  </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(Object obj, Object value)</span> <span class="comment">// 传入对象，把该字段设置为该值</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">// Method 和 Constructor通用</span></span></span><br><span class="line"><span class="function">Class <span class="title">getReturnType</span><span class="params">()</span>      <span class="comment">// 返回类型</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getParameterCount</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function">Class[] <span class="title">getParameterTypes</span><span class="params">()</span>  <span class="comment">// 返回参数类型</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">// Method</span></span></span><br><span class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span>  <span class="comment">// 调用方法,需要传入对象和参数</span></span></span><br><span class="line"><span class="function"><span class="comment">// Constructor </span></span></span><br><span class="line"><span class="function"><span class="title">newInstance</span><span class="params">(Object... initargs)</span>  <span class="comment">// 调用构造器创建对象,需要传入参数</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//扩展 通过Class对象调用newInstance是调用无参构造    </span></span></span><br></pre></td></tr></table></figure><p><strong>Modifier类API</strong></p><blockquote><p>示例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">// 获得User的Class类对象</span></span><br><span class="line">        Class c = User.class;</span><br><span class="line">        <span class="comment">// 调用构造器创建对象</span></span><br><span class="line">        User user1 = (User) c.getConstructor().newInstance();</span><br><span class="line">        <span class="comment">// 调用无参构造</span></span><br><span class="line">        User user2 = (User) c.newInstance();</span><br><span class="line">        <span class="comment">// 获取私有字段</span></span><br><span class="line">        Field field = c.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">// 给id设置值</span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(user1,<span class="number">1</span>);</span><br><span class="line">        field.set(user2,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 获取方法</span></span><br><span class="line">        Method method = c.getMethods()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        method.invoke(user1,<span class="number">11</span>);</span><br><span class="line">        method.invoke(user2,<span class="number">88</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5、操作注解"><a href="#7-5、操作注解" class="headerlink" title="7.5、操作注解"></a>7.5、操作注解</h3><p>API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Annotation[] getAnnotations();  <span class="comment">// 获取注解</span></span><br><span class="line">Annotation[] getAnnotation(Annotation annotation);  <span class="comment">// 根据注解类型获取</span></span><br><span class="line">Annotation[] getDeclaredAnnotation();</span><br></pre></td></tr></table></figure><blockquote><p>实战</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取类上的注解，</span></span><br><span class="line">Annotation[] annotations = c.getAnnotations();</span><br><span class="line"><span class="keyword">for</span>(Annotation annotation:annotations)&#123;            <span class="comment">//循环注解信息</span></span><br><span class="line">    System.out.println(annotation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取类上的注解</span></span><br><span class="line">MyAnnotation m1 = (MyAnnotation) c.getAnnotation(MyAnnotation.class);</span><br><span class="line">System.out.println(m1.value());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字段注解</span></span><br><span class="line">Field[] fields = c.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field f:fields) &#123;</span><br><span class="line">    MyAnnotation m2 = f.getAnnotation(MyAnnotation.class);</span><br><span class="line">    System.out.println(m2.value()); <span class="comment">// 注解定义的字段名是什么，就xxx()获取</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取方法的注解</span></span><br><span class="line">MyAnnotation m3 = c.getMethods()[<span class="number">0</span>].getAnnotation(MyAnnotation.class);</span><br><span class="line">System.out.println(m3.value());</span><br></pre></td></tr></table></figure><p><strong>特殊注意：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数为数组时反射调用方法需要强制转换</span></span><br><span class="line">method.invoke(user,(Object) strings);</span><br></pre></td></tr></table></figure><h3 id="7-6、操作泛型"><a href="#7-6、操作泛型" class="headerlink" title="7.6、操作泛型"></a>7.6、操作泛型</h3><p>​    上述反射API获取的参数若是HashMap，则只能得到参数类型为HashMap，而无法得到HashMap里面的键和值的类型，为了通过反射操作这些类型，java新增了ParameterizedType，GenericArrayType，TypeVariable和WildcardType<strong>几种类型</strong>来代表不能被归一到class类中的类型但是又和原始类型齐名的类型</p><ul><li>ParameterizedType：表示参数化类型，比如collection<String></li><li>GenericArrayType：表示一种元素类型是参数化类型或者类型变量的<strong>数组类型</strong></li><li>TypeVariable：各种类型变量的公共父接口</li><li>WinldcardType：代表一种通配符类型表达式</li></ul><p><strong>API</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class方法</span></span><br><span class="line">TypeVariable[] getTypeParameters() </span><br><span class="line"><span class="comment">// 如果类型被声明为泛型类型，则获得泛型类型变量，否则获得长度为0的数组  </span></span><br><span class="line">Type[] getGenericSuperClass();   <span class="comment">// 获得声明超类的泛型类型</span></span><br><span class="line">Type[] getGenericInterfaces();   <span class="comment">// 获得这个类型所声明接口的泛型类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// method方法</span></span><br><span class="line">TypeVariable[] getTypeParameters() </span><br><span class="line">Type[] getGenericParameterTypes()  <span class="comment">// 获得泛型参数，</span></span><br><span class="line"><span class="function">Type <span class="title">getGenericReturnType</span><span class="params">()</span>        <span class="comment">// 获得泛型返回值类型。 </span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// TypeVariable方法</span></span></span><br><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">Type[] <span class="title">getBounds</span><span class="params">()</span>   <span class="comment">// 获得变量的子类限定</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">// wildcardType方法     </span></span></span><br><span class="line"><span class="function">Type[] <span class="title">getUpperBounds</span><span class="params">()</span>    <span class="comment">// 获得这个类型变量的子类限定</span></span></span><br><span class="line"><span class="function">Type[] <span class="title">getLowerBounds</span><span class="params">()</span>   <span class="comment">// 超类限定</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// ParameterizedType</span></span></span><br><span class="line"><span class="function">Type <span class="title">getRawType</span><span class="params">()</span>    <span class="comment">//获得原始类型</span></span></span><br><span class="line"><span class="function">Type[] <span class="title">getActualTypeArguments</span><span class="params">()</span>    <span class="comment">// 获得这个参数化类型声明的类型参数</span></span></span><br><span class="line"><span class="function">Type <span class="title">getOwnerType</span><span class="params">()</span>     <span class="comment">//  返回外部类型，是顶层则返回null</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// GenericArrayType</span></span></span><br><span class="line"><span class="function">Type <span class="title">getGenericComponentType</span><span class="params">()</span> <span class="comment">// 获得这个数组类型声明的泛型元素类型    </span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Map&lt;String,Integer&gt; map, List&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Integer&gt; <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取test1方法</span></span><br><span class="line">        Method method1 = Test.class.getMethod(<span class="string">&quot;test1&quot;</span>, Map.class,List.class);</span><br><span class="line">        <span class="comment">// 获得 所有的参数数组</span></span><br><span class="line">        Type[] genericParameterTypes = method1.getGenericParameterTypes();</span><br><span class="line">        <span class="comment">// 变量参数数组</span></span><br><span class="line">        <span class="keyword">for</span>(Type type:genericParameterTypes)&#123;</span><br><span class="line">            <span class="comment">// 输出map的所有参数和list的所有参数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;1:&quot;</span>+type);</span><br><span class="line">            <span class="keyword">if</span>(type <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            <span class="comment">// 把map和list整体的参数细化为String,Integer这种</span></span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();</span><br><span class="line">                <span class="comment">// 输出具体的全部参数，如输出map里面的所有参数</span></span><br><span class="line">                <span class="keyword">for</span>(Type type1:actualTypeArguments)&#123;</span><br><span class="line">                    System.out.println(type1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取返回值参数</span></span><br><span class="line">        Method method2 = Test.class.getMethod(<span class="string">&quot;test2&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 获取返回值类型</span></span><br><span class="line">        Type genericReturnType = method2.getGenericReturnType();</span><br><span class="line">        System.out.println(genericReturnType);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(genericReturnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span>(Type type:actualTypeArguments)&#123;</span><br><span class="line">                System.out.println(type);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-7、反射编写泛型数组"><a href="#7-7、反射编写泛型数组" class="headerlink" title="7.7、反射编写泛型数组"></a>7.7、反射编写泛型数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; E[] printArray( E[] inputArray )&#123;</span><br><span class="line">    Class c2 = inputArray.getClass().getComponentType();</span><br><span class="line"><span class="comment">// 调用反射方法创建数组，因为无法通过E去创建数组</span></span><br><span class="line">    E[] newArray = (E[]) Array.newInstance(c2,inputArray.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputArray.length; i++) &#123;</span><br><span class="line">        newArray[i] = inputArray[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、接口"><a href="#8、接口" class="headerlink" title="8、接口"></a>8、接口</h2><h3 id="8-1、简介"><a href="#8-1、简介" class="headerlink" title="8.1、简介"></a>8.1、简介</h3><ul><li><strong>只含常量值、抽象方法</strong>，变量：public static final，方法：public abstract</li><li>接口并不是类，类描述对象的属性和方法。接口则包含类要实现的方法。</li><li>接口无法被实例化，一个类可以<strong>实现多个接口</strong>，一个接口可以多继承其他接口</li><li>实现接口的类中必须提供接口中所有方法的实现，方可实例化。否则仍为抽象类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">18</span>;              <span class="comment">// 定义成员变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAge</span><span class="params">()</span></span>;      <span class="comment">// 定义抽象方法</span></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;购物&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 类的重载</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;买&quot;</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonImpl</span> <span class="keyword">implements</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现方法，使用定义的常量</span></span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 可以重写也可以不重写</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;买鞋子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PersonImpl person = <span class="keyword">new</span> PersonImpl();</span><br><span class="line">        person.buy(<span class="string">&quot;衣服&quot;</span>);</span><br><span class="line">        person.buy();</span><br><span class="line">        Person.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">买衣服</span><br><span class="line">买鞋子</span><br><span class="line">吃</span><br></pre></td></tr></table></figure><p><strong>Java8新特性：</strong>可以为接口添加静态方法和默认方法（包含方法体）</p><ol><li>静态方法：使用 static 关键字修饰。可以<strong>通过接口直接调用</strong>静态方法。</li><li>默认方法：默认方法使用 default 关键字修饰。可以通过<strong>实现类对象</strong>来调用。<ul><li><strong>父类的默认方法之间可能造成冲突</strong>：类C实现了接口A和接口B，而接口A和接口B有一样的默认方法，就会造成冲突，此类C必需重写该方法。</li><li><strong>子类默认方法和父类的方法不会冲突</strong>，会调用父类方法</li></ul></li><li>私有方法：JDK9允许，私有方法必需是静态方法或者实例方法</li></ol><p>不过一般不推荐这么做，如Java就是Collection接口和CollectionS工具类提供静态方法</p><h3 id="8-2、接口和抽象"><a href="#8-2、接口和抽象" class="headerlink" title="8.2、接口和抽象"></a>8.2、接口和抽象</h3><table><thead><tr><th>区别</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>定义</td><td>可能包含抽象方法的类</td><td>主要是抽象方法和全局常量的集合</td></tr><tr><td>组成</td><td>构造方法、抽象方法、普通方法、常量、变量</td><td>常量、抽象方法、(jdk8.0:默认方法、静态方法)</td></tr><tr><td>使用</td><td>子类继承抽象类(extends)</td><td>子类实现接口(implements)</td></tr><tr><td>关系</td><td>抽象类可以实现多个接口</td><td>接口不能继承抽象类，但允许继承多个接口</td></tr><tr><td>局限</td><td>抽象类有单继承的局限</td><td>接口没有此局限</td></tr><tr><td>实际</td><td>作为一个模板</td><td>是作为一个标准或是表示一种能力</td></tr><tr><td>常见设计模式</td><td>模板方法</td><td>工厂模式、代理模式</td></tr></tbody></table><h3 id="8-3、Comparable接口"><a href="#8-3、Comparable接口" class="headerlink" title="8.3、Comparable接口"></a>8.3、Comparable接口</h3><ul><li>实现了 Comparable 接口的类，调用数组或者集合的 sort 方法·就行实现排序了</li><li>返回0表示相等，返回1表示当前类更大，返回 - 1 表示当前类更小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4、Compator接口"><a href="#8-4、Compator接口" class="headerlink" title="8.4、Compator接口"></a>8.4、Compator接口</h3><ul><li>实现了 Comparable 接口的类，表明这是一个比较器</li><li>数组或者集合的 sort 方法 ，传入比较器的对象也能实现比较，并且不需要改动原本的类</li><li>返回0表示相等，返回1表示当前类更大，返回 - 1 表示当前类更小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Comparator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o, Object t1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比如想自己定义String类的比较顺序，就只能通过传入比较器对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种方式de比较器</span></span><br><span class="line">Comparator.comparing(User::getId).thenComparing(User::getName);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入功能，比较null</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Comparator.*;</span><br><span class="line">Arrays.sort(users,comparing((User::getId),nullsFirst(naturalOrder())));</span><br><span class="line"><span class="comment">// 逆序后面加reversed()或者reverseOrder()</span></span><br></pre></td></tr></table></figure><h3 id="8-5、对象克隆"><a href="#8-5、对象克隆" class="headerlink" title="8.5、对象克隆"></a>8.5、对象克隆</h3><p><strong>问题：</strong>众所周知，把A对象赋给B对象，只是传递了引用，二者实际还是指向同一个地址，此时B对象的改变会引起A对象的改变</p><p><strong>解决</strong>：通过克隆（实现cloneable接口）可以产生一个新的对象，并且完全脱离旧对象而存在</p><blockquote><p>浅克隆</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Son son = <span class="keyword">new</span> Son();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">// Object类的clone方法是受保护的，main方法不能调用</span></span><br><span class="line">        User newUser = (User) user.clone();</span><br><span class="line">        System.out.println(user.hashCode());</span><br><span class="line">        System.out.println(newUser.hashCode());</span><br><span class="line"></span><br><span class="line">        System.out.println(user.son.hashCode());</span><br><span class="line">        System.out.println(newUser.son.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里出现了一个问题，新对象和旧对象的hashcode不同，但是他们内部属性son类却还是同一个，<strong>新对象和旧对象直接还存在联系</strong></p><ul><li>浅克隆：可能还存在一些关联</li><li>深克隆：完全不同</li></ul><blockquote><p>深克隆</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Son 实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重新编写clone方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">    User user = (User) <span class="keyword">super</span>.clone();</span><br><span class="line">    user.son = (Son) <span class="keyword">this</span>.son.clone();</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>cloneable是一个标记接口，实际上没有任何作用，因为我们需要的clone方法是从Object类继承而来，如果一个对象克隆但是有没有实现该接口，就会生成一个检查型异常</p><h2 id="9、lambda表达式"><a href="#9、lambda表达式" class="headerlink" title="9、lambda表达式"></a>9、lambda表达式</h2><h3 id="9-1、函数式接口"><a href="#9-1、函数式接口" class="headerlink" title="9.1、函数式接口"></a>9.1、函数式接口</h3><ol><li><code>只包含一个抽象方法</code>的接口，称为函数式接口。</li><li>我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检 查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个 接口是一个函数式接口。</li><li><strong>Lambda表达式就是一个函数式接口的实例。</strong></li></ol><h3 id="9-2、Java内置四大核心函数式接口"><a href="#9-2、Java内置四大核心函数式接口" class="headerlink" title="9.2、Java内置四大核心函数式接口"></a>9.2、Java内置四大核心函数式接口</h3><table><thead><tr><th></th><th>参数类型</th><th>返回类型</th></tr></thead><tbody><tr><td>消费型接口</td><td>T</td><td>void</td></tr><tr><td>供给型接口</td><td>无</td><td>T</td></tr><tr><td>函数型接口</td><td>T</td><td>R</td></tr><tr><td>断定型接口</td><td>T</td><td>boolean</td></tr></tbody></table><h3 id="9-3、lambda表达式"><a href="#9-3、lambda表达式" class="headerlink" title="9.3、lambda表达式"></a>9.3、lambda表达式</h3><ol><li>Lambda 是一个匿名函数，可以把 Lambda 表达式理解为是<strong>一段可以 传递的代码</strong></li><li>Lambda表达式可以替代<strong>只有一个方法的匿名内部类</strong></li><li>本质上还是一个匿名类，所以不能引用前后的非static数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ilike</span></span>&#123; </span><br><span class="line"><span class="function">String <span class="title">Lamada</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 匿名内部类实现</span></span><br><span class="line">        A a = <span class="keyword">new</span> A() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        a.index(<span class="number">5</span>);</span><br><span class="line">     <span class="comment">// lambda表达式实现   </span></span><br><span class="line">        A a1 = ((i) -&gt; &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;);</span><br><span class="line">        a1.index(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果为单个参数可以删去()，单条执行语句可以删去&#123;&#125;</span></span><br><span class="line"><span class="comment">// 简化版本</span></span><br><span class="line">A a1 = (i -&gt; System.out.println(i));</span><br><span class="line">a1.index(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><blockquote><p>变量作用域问题</p></blockquote><ul><li>lambda表达式只能获取外部的变量的值，而<strong>不能修改</strong></li><li>lambda表达式获取的外部变量，在整个作用域内<strong>不能发生改变</strong>，如下面 i 不能变化。即必须为事实最终变量</li><li>lambda表达式使用的 this 指向的是外部方法，而不是内部匿名类，并且使用this就不能定义为静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> j =<span class="number">0</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 如果定义了i++;会报错</span></span><br><span class="line">        Factory factory = ()-&gt;&#123;</span><br><span class="line">            j--;         <span class="comment">// i--会报错,因为不安全</span></span><br><span class="line">            <span class="keyword">int</span> m = j+i; <span class="comment">// 可以使用i的值，但是不能改变i</span></span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;;</span><br><span class="line">        factory.print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test.fun1(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-4、方法引用"><a href="#9-4、方法引用" class="headerlink" title="9.4、方法引用"></a>9.4、方法引用</h3><ul><li>当要传递给Lambda体的操作，<code>已经有实现的方法了</code>，可以使用方法引用！</li><li>简单理解：<strong>使用其他方法当做lambda表达式的方法</strong>，无须自己写方法</li></ul><p><strong>要求：</strong>实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致！</p><p><strong>格式：</strong></p><ul><li><p>使用操作符 “::” 将类(或对象) 与 方法名分隔开来。</p></li><li><p>对象::实例方法名、类::静态方法名、类::实例方法名</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口：</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">big</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法调用实现,Test02类的big方法参数和返回值都和Test01的eat方法一致，所以可以调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Test02 test02 = <span class="keyword">new</span> Test02();</span><br><span class="line">Test01 test01 = test02::big;   <span class="comment">//调用了方法</span></span><br><span class="line">test01.eat(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-5、构造器引用"><a href="#9-5、构造器引用" class="headerlink" title="9.5、构造器引用"></a>9.5、构造器引用</h3><p><strong>要求：</strong>构造器参数列表要与接口中抽象 方法的参数列表一致！且方法的返回值即为构造器对应类的对象。</p><p><strong>格式：</strong>类名::new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">createUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器引用</span></span><br><span class="line">Factory factory = User::<span class="keyword">new</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// lambda表达式</span></span><br><span class="line">Test01 test01 = (()-&gt;&#123;  <span class="keyword">return</span> <span class="keyword">new</span> Bank();&#125;);</span><br></pre></td></tr></table></figure><h3 id="9-6、数组引用"><a href="#9-6、数组引用" class="headerlink" title="9.6、数组引用"></a>9.6、数组引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须要有参数指定长度</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] createArr(<span class="keyword">int</span> length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Factory factory = <span class="keyword">int</span>[]::<span class="keyword">new</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arr = factory.createArr(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、内部类"><a href="#10、内部类" class="headerlink" title="10、内部类"></a>10、内部类</h2><p>分类：</p><ol><li>成员内部类（static和非static，可以为public和private和protected）</li><li>局部内部类（不谈修饰符）</li><li>匿名内部类</li></ol><h3 id="9-1、成员内部类"><a href="#9-1、成员内部类" class="headerlink" title="9.1、成员内部类"></a>9.1、成员内部类</h3><ul><li>可以把内部类看做外部类的一个<strong>属性</strong>，同样有public和private和protected修饰符，<ul><li>public能在外部通过外部类创建对象，protected能在本包下创建对象，</li><li>private则只能通过<strong>外部类封装内部类的方法</strong>让外界能访问到内部类的方法</li></ul></li><li>内部类具有自己的属性和方法，但是<strong>不能定义成静态</strong>的</li><li>内部类可以获得外部类<strong>所有的</strong>方法和属性（包括私有、静态等）</li><li>内部类和外部类的属性或者方法相同时，内部类的会<strong>覆盖外部类</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outer</span><span class="params">(String name, <span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// public成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner1</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name = <span class="string">&quot;Inner&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 内部类可以访问外部的所有方法和属性(包括私有的)</span></span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                System.out.println( <span class="string">&quot;访问了外部类私有数据&quot;</span>+name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// private内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner2</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String name = <span class="string">&quot;Inner&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 内部类可以访问外部的所有方法和属性(包括私有的)</span></span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="comment">// 覆盖外部的name</span></span><br><span class="line">                System.out.println( <span class="string">&quot;访问了外部类私有数据&quot;</span>+name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把内部类方法封装出来</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">funByInner2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Inner2 inner2 = <span class="keyword">new</span> Inner2();</span><br><span class="line">        inner2.fun();</span><br><span class="line">        System.out.println(inner2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// public内部类对象必须通过外部类对象创建</span></span><br><span class="line">    Outer outer = <span class="keyword">new</span> Outer(<span class="string">&quot;张三&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    Outer.Inner1 inner1 = outer.<span class="function">new <span class="title">Inner1</span><span class="params">()</span></span>;</span><br><span class="line">    inner1.fun();</span><br><span class="line">    <span class="comment">// private内部类无法在外部直接创建，只能通过外部类的方法封装内部类方法</span></span><br><span class="line">    outer.funByInner2();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2、静态内部类"><a href="#9-2、静态内部类" class="headerlink" title="9.2、静态内部类"></a>9.2、静态内部类</h3><ul><li>静态成员内部类可以定义静态属性和方法，但是有使用限制<ul><li>静态属性使用无限制，获取可以直接通过类获取，而不必new对象</li><li>静态方法只能获取静态内部类或外部类的<strong>静态属性</strong>，获取可以直接通过类获取，而不必new对象</li></ul></li><li>静态成员内部类的非静态属性和方法<ul><li>非静态属性：只能被非静态方法调用</li><li>非静态方法：只能调用外部类的静态属性和方法，内部类的所有属性和方法</li></ul></li><li>静态内部类同样有3种修饰符，</li></ul><p>总之，最大的不同就是因为是静态，所以只能获取外部的静态资源。</p><h3 id="9-3、局部内部类"><a href="#9-3、局部内部类" class="headerlink" title="9.3、局部内部类"></a>9.3、局部内部类</h3><p><strong>定义：</strong>在<strong>方法中定义</strong>，然后使用</p><p><strong>范围：</strong>只能在该方法中使用，而且必须先声明，在使用</p><p><strong>特点：</strong></p><ul><li>不能使用任何修饰符</li><li>可以访问局部变量（<strong>在方法内改变了必须从未修改过</strong>），但是不能修改</li><li>this指向的是本身</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">            <span class="keyword">private</span> String name;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="comment">// this指向自己，</span></span><br><span class="line">                System.out.println(i+name+<span class="keyword">this</span>.hashCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.show();</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-4、匿名内部类"><a href="#9-4、匿名内部类" class="headerlink" title="9.4、匿名内部类"></a>9.4、匿名内部类</h3><p><strong>概念：</strong>不能定义任何静态成员、方法和类，只能创建匿名内部类的一个实例。</p><p><strong>特点：</strong></p><ul><li>匿名内部类必须<strong>继承父类或实现接口</strong></li><li>可以访问局部变量（<strong>在方法内改变了必须从未修改过</strong>），但是不能修改</li><li>this指向的是外部方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> A() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.eat();</span><br></pre></td></tr></table></figure><p>匿名内部类继承或者实现一个类或接口，然后调用里面的方法。</p><blockquote><p>注意</p></blockquote><p>局部和匿名内部类访问外部局部变量的原因是编译器<strong>会做变量拷贝</strong>，这也是为什么不能访问在外部发生过值变化的局部变量的原因</p><h2 id="11、代理"><a href="#11、代理" class="headerlink" title="11、代理"></a>11、代理</h2><h3 id="11-1、静态代理"><a href="#11-1、静态代理" class="headerlink" title="11.1、静态代理"></a>11.1、静态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Marry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;等了这么久，终于等到你。。。 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MarryCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Marry marry;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MarryCompany</span><span class="params">(Marry marry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.marry = marry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toMarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        marry.toMarry();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;婚礼现场布置中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜您结婚，迈入人生第二阶段&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代理类和目标类实现同一个接口</li><li>代理类构造方法需要传入目标类</li><li>代理类的方法依次实现before方法，目标类方法，after方法</li></ul><p><strong>优点</strong></p><ul><li>真实的对象更加纯粹，不用去关注一些公共的业务</li><li>广告业务交给代理类，实现业务分工</li><li>公共业务发生拓展的时候，方便集中管理</li></ul><p><strong>缺点</strong></p><ul><li>一个真实对象会产生一个代理角色：代码量翻倍——&gt;效率低</li></ul><h3 id="11-2、动态代理（反射）"><a href="#11-2、动态代理（反射）" class="headerlink" title="11.2、动态代理（反射）"></a>11.2、动态代理（反射）</h3><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的，不是直接写好的</li><li>动态代理分为两大类：基于接口和基于类<ul><li>基于接口——-JDK代理</li><li>基于类：cglib</li><li>Java字节码实现：JavaAssist</li></ul></li></ul><blockquote><p>InvocationHandler：反射包下的类，是一个接口，只有invoke方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy,方法 method,Object[] args)</span><span class="keyword">throws</span> Throwable</span></span><br></pre></td></tr></table></figure><p>定义一个动作，所有接口的方法执行都会替换成动作执行</p><blockquote><p>Proxy：</p></blockquote><p>Proxy为创建动态代理类的实例提供了静态方法，也是所有动态代理类的父类的方法创建。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, </span></span></span><br><span class="line"><span class="params"><span class="function">              类&lt;?&gt;[] interfaces, InvocationHandler h)</span> </span></span><br><span class="line"><span class="function"><span class="comment">//返回指定接口的代理类的实例，该接口将方法调用分派给指定的调用处理程序</span></span></span><br><span class="line"><span class="function"><span class="comment">//即根据传入的父接口的子实现类，返回该父接口的对象（向上转型），通过该父接口调用子类方法</span></span></span><br></pre></td></tr></table></figure><ul><li>参数一为Loader的类加载器</li><li>参数二为代理实现的接口，Class对象数组</li><li>参数三为调用处理器，即代理类</li></ul><p><strong>实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// invoke相当于执行接口的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] objects)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="comment">// 反射调用了方法，rent为对象，objects为参数</span></span><br><span class="line">        Object result = method.invoke(rent,objects);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//代理角色:现在没有</span></span><br><span class="line">        ProxyInvocationHandler proxyInvocationHandler = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        <span class="comment">//传入真实角色</span></span><br><span class="line">        proxyInvocationHandler.setRent(host);</span><br><span class="line">        <span class="comment">// 获得代理类</span></span><br><span class="line">        Rent proxy = (Rent) proxyInvocationHandler.getProxy();</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(一):基本语法</title>
      <link href="/2021/06/21/JavaSE/JavaSE%20(%20%E4%B8%80%20)%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/06/21/JavaSE/JavaSE%20(%20%E4%B8%80%20)%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h2><p><strong>按照数据类型分类：</strong></p><ul><li>基本类型：整形、浮点型、字符型、布尔型</li><li>引用类型：类、接口、数组、枚举、注解等</li></ul><p><strong>按声明的位置的不同</strong></p><ul><li>成员变量：方法体外，类体内声明的变量称为（其中被static修饰的称为<strong>类变量</strong>，其他为实例变量）</li><li>局部变量：在方法体内部声明（形参、方法内局部变量、代码块局部变量）</li></ul><p><strong>同：</strong>都有生命周期 </p><p><strong>异：</strong>局部变量除形参外，需显式初始化。</p><h3 id="1-1、整型"><a href="#1-1、整型" class="headerlink" title="1.1、整型"></a>1.1、整型</h3><p>整型表示没有小数部分的数值</p><table><thead><tr><th align="center">类型</th><th align="center">存储需求</th><th>范围</th><th>表示</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">4字节</td><td>-2 ^31 ~2^31-1(约21亿)</td><td>正常表示</td></tr><tr><td align="center">short</td><td align="center">2字节</td><td>-2 ^15 ~2^15 -1</td><td></td></tr><tr><td align="center">long</td><td align="center">8字节</td><td>-2 ^63 ~2^63-1(约21亿)</td><td>后缀有L或者l</td></tr><tr><td align="center">byte</td><td align="center">1字节</td><td>-128~127</td><td></td></tr></tbody></table><p>需要注意的是，</p><ul><li>Java的整型范围与平台无关（C/C++会自动选择最优的）</li><li>Java没有任何无符号形式的整形</li></ul><h3 id="1-2、浮点类型"><a href="#1-2、浮点类型" class="headerlink" title="1.2、浮点类型"></a>1.2、浮点类型</h3><table><thead><tr><th>类型</th><th>存储需求</th><th>范围</th><th>表示</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>-3.403E38 ~ 3.403E38</td><td>后缀有F或者f</td></tr><tr><td>double</td><td>8字节</td><td>-1.798E308 ~ 1.798E308</td><td>后缀有D或者d</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li><p>没有后缀默认为double类型</p></li><li><p>两种表示方法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5.1</span>   <span class="number">6.34F</span>   <span class="number">.512</span>   <span class="comment">// 十进制计数法 </span></span><br><span class="line"><span class="number">5.12e2</span> <span class="number">512E2</span> <span class="number">100E-2</span>  <span class="comment">// 科学计数法</span></span><br></pre></td></tr></table></figure></li><li><p>特殊的三个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Double.POSITIVE_INFINITY;  <span class="comment">// 表示正无穷大</span></span><br><span class="line">Double.NEGATIVE_INFINITY;  <span class="comment">// 表示负无穷大</span></span><br><span class="line">Double.NaN;                <span class="comment">// 表示不是一个数字，0/0 或者 负数平方根</span></span><br></pre></td></tr></table></figure></li><li><p>所有的浮点数直接不能比较，因为浮点数底层还是用<strong>二进制</strong>表示的，二进制无法准确的表示小数</p></li></ul><h3 id="1-3、char类型"><a href="#1-3、char类型" class="headerlink" title="1.3、char类型"></a>1.3、char类型</h3><table><thead><tr><th>类型</th><th>存储需求</th><th>范围</th></tr></thead><tbody><tr><td>char</td><td>2字节</td><td>\u0000~\uFFFF</td></tr></tbody></table><ul><li>char类型用于表示<strong>单个字符</strong>，一些Unicode编码<strong>需要两个char</strong>表示</li><li>Java中的所有字符都使用Unicode编码，通常字符用一个char存储，特殊的用两个存储，如emoji表情🍺</li><li>字符型变量的三种表现形式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;       <span class="comment">// 字面量表示</span></span><br><span class="line"><span class="keyword">char</span> c2 = <span class="string">&#x27;\n&#x27;</span>;      <span class="comment">// 用转义字符‘\’来将其后的字符转变为特殊字符型常量</span></span><br><span class="line"><span class="keyword">char</span> c3 = <span class="string">&#x27;\uXXXX&#x27;</span>;  <span class="comment">// 直接使用 Unicode 值来表示字符型常量</span></span><br></pre></td></tr></table></figure><ul><li>特殊的：\u是一种<strong>转义序列</strong>，可以出现在<strong>加引号的字符常量</strong>或者<strong>字符串之外</strong>（其他转义序列不行）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String\u005B\u005D args)</span>  <span class="comment">// 可以运行</span></span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>Unicode转义序列会在<strong>解析代码</strong>之前处理，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \u000A a        会报错,因为\u000A会转换成一个换行符 \n</span></span><br></pre></td></tr></table></figure><ul><li>char也是用二进制存储的，可以和int相互转换，但int的范围不能太大</li></ul><blockquote><p>Unicode和char类型</p></blockquote><p>​    Unicode统一了同一了世界上所有字符，每个字符都为其分配一个数字来表示，当时认为16位（65536）已经足够表示了，所以Java设计char类型时也使用16位的Uicode字符集，但是后来随着汉字和日韩语言等的加入，16位得char已经不够使用了。</p><p>​    新标准：U+0000~U+FFFF表示经典Unicode编码，其他在最前面加入一位表示<strong>代码平面</strong>，例如U+10000就表示第一个代码平面。</p><p><strong>注意：Unicode只是一种标准，一般传输数据多用UTF-8或UTF-16</strong></p><p><strong>UTF-8（Unicode的一种实现）：</strong></p><ul><li>变长字节的设计，一个字符最长4字节，最少1字节，大部分汉字3字节</li><li>用一个字节表示的字符，第一位设为0，后面七位对应字符的Unicode码点，由于128个字符的Unicode完全对照ASCII码，所以ASCII编码的文件可以用UTF-8打开不乱码</li><li>用n个字节以上表示的，则第一个字节的前n位都为1，第N+1位为0，剩下的n-1个字节前两位都设置为10，多余的位置使用该字符的Unicode二进制代码填充，不够用0填充</li></ul><p><strong>UTF-16（Java使用的编码方式）</strong>：</p><ul><li>用2个字节或者4个字节表示</li><li>4字节表示的使用两个char，2字节的使用一个char表示</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">U+1D546 使用UTF-16需要两个代码单元，也就是使用两个char表示</span><br><span class="line">此时如果调用charAt(1) 获取的是第二个代码单元</span><br></pre></td></tr></table></figure><h3 id="1-4、boolean类型"><a href="#1-4、boolean类型" class="headerlink" title="1.4、boolean类型"></a>1.4、boolean类型</h3><ul><li>大小1bit（位），判断逻辑条件，不能和整形相互转换</li><li>不允许取null值</li></ul><h3 id="1-5、数值类型之间的转换"><a href="#1-5、数值类型之间的转换" class="headerlink" title="1.5、数值类型之间的转换"></a>1.5、数值类型之间的转换</h3><ul><li>自动类型转换：多数据混合运算时，会<strong>自动转换</strong>成容量最大的那种。</li><li>强制类型转换：可以把<strong>大的数据类型强制转换(casting)成小的</strong>数据类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">char</span>、<span class="keyword">byte</span>、<span class="keyword">short</span>)<span class="keyword">int</span> -&gt; <span class="keyword">long</span> -&gt; <span class="keyword">float</span> -&gt; <span class="keyword">double</span> -&gt; String</span><br><span class="line"><span class="comment">// char、byte、short运算时会自动转换成int类型   </span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>布尔类型不能转换</li><li>String类型转回基本类型需要通过基本类型的包装类</li></ul><h3 id="1-6、进制"><a href="#1-6、进制" class="headerlink" title="1.6、进制"></a>1.6、进制</h3><ul><li>Java整数常量默认是int类型，当用二进制定义整数时，其第32位是符号位；当是long类型时，二进制默认占64位，第64位是符号位，即最高位</li><li>前缀0X或者0x表示十六进制，前缀0表示八进制，前缀0b或者0B表示二进制</li><li>计算机以二进制<strong>补码</strong>的形式保存所有的整数</li></ul><p><strong>三种形式：</strong>负数情况下：反码  = 127 - 原码 、  补码 = 128 - 原码</p><ul><li>原码：最高位为符号位，负数为1。</li><li>反码：正数与原码相等，负数除了最高位，其他取反</li><li>补码：正数与原码相等，负数等于反码加1。</li></ul><p><strong>特点：</strong></p><ul><li>正数的原码、反码、补码都相同</li><li>负数的补码是其反码+1</li></ul><p><strong>原因：</strong></p><p>让计算机<strong>计算符号位</strong>比较麻烦，于是人们想出了将符号位也参与运算的方法。</p><p>根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了。</p><p>1-1=1+(-1)=0000 0001(原) + 1000 0001(原) = 0000 0001(补) + 1111 1111(补) = 0000 0000(原) = 0</p><ul><li>即让 1-1  = 1 + (-1) = (1 + (128-1))%128 =  128 % 128 = 0</li></ul><h2 id="2、变量和常量"><a href="#2、变量和常量" class="headerlink" title="2、变量和常量"></a>2、变量和常量</h2><h3 id="2-1、变量"><a href="#2-1、变量" class="headerlink" title="2.1、变量"></a>2.1、变量</h3><p><strong>概念：</strong></p><ul><li>内存中的一个存储区域（保存数据），该区域的值在不断变化，</li><li>程序中最基本的存储单元，</li></ul><p><strong>声明变量：</strong>每个变量都有一个类型，声明时需要指定类型，然后是变量名，以分号结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">变量名: 合法的标志符</span><br><span class="line">标识符: 以字母开头并由字母(包括下划线)或者数字构成的序列，注意不能与关键字和保留字重名</span><br><span class="line">关键字: 被Java语言赋予了特殊含义，用做专门用途的字符串（单词），都为小写</span><br><span class="line">保留字: 现在Java没用到，但是以后可能用到</span><br></pre></td></tr></table></figure><p><strong>初始化：</strong>变量必须初始化后才能使用（类的成员变量会有默认值）</p><p><strong>作用域：</strong>其定义所在的一对{ }内 </p><p><strong>分类：</strong>引用类型和基本类型</p><h3 id="2-2、常量"><a href="#2-2、常量" class="headerlink" title="2.2、常量"></a>2.2、常量</h3><ul><li>使用关键字 final 修饰的变量，不能被修改，</li><li>通常使用大写字母作为变量名</li></ul><h3 id="2-3、枚举对象"><a href="#2-3、枚举对象" class="headerlink" title="2.3、枚举对象"></a>2.3、枚举对象</h3><p>Java 枚举是一个<code>特殊的类</code>，一般表示一组常量，参数默认用public static final 修饰</p><h2 id="3、数字计算"><a href="#3、数字计算" class="headerlink" title="3、数字计算"></a>3、数字计算</h2><h3 id="3-1、算术运算符"><a href="#3-1、算术运算符" class="headerlink" title="3.1、算术运算符"></a>3.1、算术运算符</h3><ul><li>当两个操作数含浮点数时：表示浮动除法，</li><li>全为整数时：为整数除法（自动舍弃小数点后的数）</li></ul><h3 id="3-2、数学函数与变量"><a href="#3-2、数学函数与变量" class="headerlink" title="3.2、数学函数与变量"></a>3.2、数学函数与变量</h3><ul><li>Math 类提供很多方法，提供数学计算</li><li>StrictMath 类可以保证所有平台的计算结果一致</li><li>Math.PI    Math.E  表示π</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">abs  <span class="comment">// 绝对值</span></span><br><span class="line">acos,asin,atan,cos,sin,tan  <span class="comment">// 三角函数</span></span><br><span class="line">sqrt  <span class="comment">// 平方根</span></span><br><span class="line">pow(<span class="keyword">double</span> a,doble b) <span class="comment">//  a的b次幂</span></span><br><span class="line">log  <span class="comment">// 自然对数</span></span><br><span class="line">exp <span class="comment">//  e为底指数</span></span><br><span class="line">max(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span><br><span class="line">min(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span><br><span class="line">random()                  <span class="comment">// 返回0.0到1.0的随机数</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> a)</span>      <span class="comment">// double型数据a转换为long型（四舍五入）</span></span></span><br><span class="line"><span class="function"><span class="title">toDegrees</span><span class="params">(<span class="keyword">double</span> angrad)</span>  <span class="comment">// 弧度—&gt;角度</span></span></span><br><span class="line"><span class="function"><span class="title">toRadians</span><span class="params">(<span class="keyword">double</span> angdeg)</span>  <span class="comment">// 角度—&gt;弧度</span></span></span><br></pre></td></tr></table></figure><h3 id="3-4、结合赋值运算符"><a href="#3-4、结合赋值运算符" class="headerlink" title="3.4、结合赋值运算符"></a>3.4、结合赋值运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+=  *= /= %=</span><br></pre></td></tr></table></figure><h3 id="3-5、自增和自减"><a href="#3-5、自增和自减" class="headerlink" title="3.5、自增和自减"></a>3.5、自增和自减</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x++  <span class="comment">// 先使用x，再++   </span></span><br><span class="line">++x  <span class="comment">// 先++，在使用x </span></span><br><span class="line">x-- </span><br></pre></td></tr></table></figure><h3 id="3-6、位运算"><a href="#3-6、位运算" class="headerlink" title="3.6、位运算"></a>3.6、位运算</h3><p>位运算是对整形的操作，若为布尔值，则为逻辑操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;    <span class="comment">// 与：全1则1，否则0</span></span><br><span class="line">|    <span class="comment">// 或：含1则1</span></span><br><span class="line">^    <span class="comment">// 异或：不同为1，相同为0</span></span><br><span class="line">~    <span class="comment">// 非：取反</span></span><br><span class="line">&gt;&gt;   <span class="comment">// 右移：</span></span><br><span class="line">&lt;&lt;   <span class="comment">// 左移</span></span><br><span class="line">&gt;&gt;&gt;  <span class="comment">// 右移并且用0填充高位</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">System.out.println(a&lt;&lt;<span class="number">1</span>);  <span class="comment">// 6</span></span><br><span class="line">System.out.println(a&gt;&gt;<span class="number">1</span>);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="3-7、逻辑运算"><a href="#3-7、逻辑运算" class="headerlink" title="3.7、逻辑运算"></a>3.7、逻辑运算</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;  逻辑短路与  &amp;</span><br><span class="line">||  逻辑短路或  |</span><br><span class="line">!   取反</span><br></pre></td></tr></table></figure><h2 id="4、字符串String类型"><a href="#4、字符串String类型" class="headerlink" title="4、字符串String类型"></a>4、字符串String类型</h2><h3 id="4-1、String类"><a href="#4-1、String类" class="headerlink" title="4.1、String类"></a>4.1、String类</h3><p><strong>概念：</strong></p><ul><li>String属于引用类型</li><li>String是一个<strong>final类</strong>，代表不可变的<strong>字符序列</strong>。</li><li>String对象的字符内容是存储在一个**字符数组value[]**中的，但是不能把字符串和字符数组划上等号，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span>[] value;   <span class="comment">// String 内部是一个用final定义的char[]数组</span></span><br></pre></td></tr></table></figure><p><strong>定义：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一，使用字面量</span></span><br><span class="line">String str1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">// 方法二，使用字符串创建</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="comment">// 方法三，使用字符数组创建</span></span><br><span class="line">String str3 = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li>字面量形式创建的字符串是放在<code>字符串常量池</code>的</li><li>new出来的是放在<code>堆</code>中的，在常量池创建一个对象（存在即不用创建），然后引用</li></ul><p><strong>子串：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">String s2 = s1.substring(<span class="number">0</span>,<span class="number">3</span>);  <span class="comment">// s2 为 s1的一个子串</span></span><br></pre></td></tr></table></figure><p><strong>拼接：</strong></p><ul><li>两个字符串拼接，只要一个不为字面量，结果就在堆中产生</li><li>拼接结果调用intern()方法，把结果放到常量池中<ul><li>JDK1.8，无论结果失败成功，都返回常量池中的对象</li><li>JDK1.6，只有成功返回常量池的对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s4 = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>;   <span class="comment">// 字符串常量拼接的原理是编译器优化</span></span><br><span class="line"></span><br><span class="line">String s5 = s1 + <span class="string">&quot;b&quot;</span>;   <span class="comment">// 字符串变量拼接的原理是StringBuilder，返回新对象</span></span><br><span class="line"><span class="comment">// String s5 = new StringBuilder().append(&quot;a&quot;).append(&quot;b&quot;).toString();</span></span><br><span class="line"><span class="comment">// 并且这种情况如果在循环体内不断进行，会很浪费资源</span></span><br></pre></td></tr></table></figure><p><strong>不可变的优劣：</strong></p><p><strong>劣：</strong></p><ul><li>由于不可变，所以String每次想要改变时，只能通过定义新的字符串，这样效率低</li></ul><p><strong>优：</strong></p><ul><li>编译器可以让字符串共享（放在字符串常量池中）</li></ul><p>Java开发者认为共享更加高效，大多数情况下字符串都是比较等而很少修改</p><p><strong>空串与Null串：</strong></p><ul><li>空串：长度为0的字符串，””，本质上是一个Java对象，只是没有内容</li><li>Null串：没有和任何对象关联</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(str != <span class="keyword">null</span> &amp;&amp; str.length()!=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>码点与代码单元：</strong></p><ul><li>码点：每一个char</li><li>代码单元：每个字符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;🍺 很牛逼&quot;</span>;</span><br><span class="line"><span class="comment">// 输出char[]数组的长度 6</span></span><br><span class="line">System.out.println(str.length()); </span><br><span class="line"><span class="comment">// 输出实际字符个数 5</span></span><br><span class="line">System.out.println(str.codePointCount(<span class="number">0</span>,str.length()));</span><br><span class="line"><span class="comment">// 输出？，而不是空格 </span></span><br><span class="line">System.out.println(str.charAt(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// 输出 57210，转换成int</span></span><br><span class="line">System.out.println(str.codePointAt(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// 遍历每一个码点，然后转换回字符串 🍺 很牛逼     </span></span><br><span class="line"><span class="keyword">int</span>[] codes = str.codePoints().toArray();</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(codes,<span class="number">0</span>,codes.length));</span><br></pre></td></tr></table></figure><p>常用API：</p><p><strong>转换成基本类型</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String a = “<span class="number">43</span>”; </span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(a);</span><br></pre></td></tr></table></figure><h3 id="4-2、StringBuilder"><a href="#4-2、StringBuilder" class="headerlink" title="4.2、StringBuilder"></a>4.2、StringBuilder</h3><ul><li>StringBuilder继承了AbstractStringBuilder类</li><li>AbstractStringBuilder类定义了char数组，但是没有指定为final，这意味着可变</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder str = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">System.out.println(str.hashCode());</span><br><span class="line">str.append(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">System.out.println(str.hashCode());</span><br><span class="line"><span class="comment">// 两次的结果一致</span></span><br></pre></td></tr></table></figure><p><strong>常用API：</strong></p><ul><li>创建对象，注意<strong>只能通过new创建</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder()           <span class="comment">// 初始容量16的字符串缓冲区</span></span><br><span class="line">StringBuilder(<span class="keyword">int</span> size)   <span class="comment">// 构造指定容量的字符串缓冲区</span></span><br><span class="line">StringBuilder(String str) <span class="comment">// 将内容初始化为指定字符串内容</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">StringBuilder <span class="title">append</span><span class="params">(xxx)</span>：               <span class="comment">// 字符串拼接</span></span></span><br><span class="line"><span class="function">StringBuilder <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span>   <span class="comment">// 删除指定位置的内容</span></span></span><br><span class="line"><span class="function">StringBuilder <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, String str)</span>   <span class="comment">// 替换</span></span></span><br><span class="line"><span class="function">StringBuilder <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset, xxx)</span>     <span class="comment">// 在指定位置插入xxx</span></span></span><br><span class="line"><span class="function">StringBuilder <span class="title">reverse</span><span class="params">()</span>                   <span class="comment">// 把当前字符序列逆转</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span>            <span class="comment">// 返回str出现的位置           </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> n)</span>                 <span class="comment">// 获得指定位置的字符</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCharAt</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">char</span> ch)</span></span></span><br></pre></td></tr></table></figure><h3 id="4-3、StringBuffer"><a href="#4-3、StringBuffer" class="headerlink" title="4.3、StringBuffer"></a>4.3、StringBuffer</h3><ul><li>线程安全</li><li>同样的继承了AbstractStringBuilder类，</li><li>大部分方法使用synchronized修饰</li></ul><h2 id="5、输入与输出"><a href="#5、输入与输出" class="headerlink" title="5、输入与输出"></a>5、输入与输出</h2><h3 id="5-1、输入"><a href="#5-1、输入" class="headerlink" title="5.1、输入"></a>5.1、输入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取密码可以通过Console,这样输入不可见。并且一次只能读一行</span></span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">// 获取一行的输入 输入 124 d 读取 124 d</span></span><br><span class="line">String str1 = in.nextLine();</span><br><span class="line">System.out.println(str1);</span><br><span class="line"><span class="comment">// 读取到空格 输入 124 d 读取 124</span></span><br><span class="line">String str2 = in.next();</span><br><span class="line">System.out.println(str2);</span><br><span class="line"><span class="comment">// 判断数据是否还有其他词 true</span></span><br><span class="line">System.out.println(in.hasNext());</span><br><span class="line"><span class="comment">// 直接获取下一个</span></span><br><span class="line">System.out.println(in.next());</span><br></pre></td></tr></table></figure><h3 id="5-2、输出"><a href="#5-2、输出" class="headerlink" title="5.2、输出"></a>5.2、输出</h3><p><strong>格式化输出</strong>：Java沿用了C语言的printf方法</p><h2 id="6、控制流程"><a href="#6、控制流程" class="headerlink" title="6、控制流程"></a>6、控制流程</h2><h3 id="6-1、块作用域"><a href="#6-1、块作用域" class="headerlink" title="6.1、块作用域"></a>6.1、块作用域</h3><ul><li>块是指由若干条Java语句组成的语句，并且用一对大括号括起来</li><li>块定义了变量的作用域，一个块中（或者是块1中的块2）的变量<strong>不能同名</strong></li></ul><h3 id="6-2、条件语句"><a href="#6-2、条件语句" class="headerlink" title="6.2、条件语句"></a>6.2、条件语句</h3><h3 id="6-3、循环"><a href="#6-3、循环" class="headerlink" title="6.3、循环"></a>6.3、循环</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while()&#123;</span><br><span class="line"> 程序体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4、确定循环"><a href="#6-4、确定循环" class="headerlink" title="6.4、确定循环"></a>6.4、确定循环</h3><p>for循环等</p><h3 id="6-5、多重选择"><a href="#6-5、多重选择" class="headerlink" title="6.5、多重选择"></a>6.5、多重选择</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> choice = in.nextInt();</span><br><span class="line"><span class="keyword">switch</span> (choice)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;Not in&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><ul><li>如果没有break会一直往下执行</li><li>case标签可以是如下（常量）<ul><li>char、byte、short、int的常量表达式</li><li>枚举常量</li><li>字符串<strong>字面量</strong></li></ul></li></ul><h3 id="6-6、中断控制"><a href="#6-6、中断控制" class="headerlink" title="6.6、中断控制"></a>6.6、中断控制</h3><ul><li>break</li><li>continue</li><li>goto（不建议使用）</li></ul><h2 id="7、大数"><a href="#7、大数" class="headerlink" title="7、大数"></a>7、大数</h2><p>有时候，基本的整数和浮点数不能满足需求，可以使用math包里的<strong>BigInteger</strong>和<strong>BigDecimal</strong></p><h3 id="7-1、BigInteger"><a href="#7-1、BigInteger" class="headerlink" title="7.1、BigInteger"></a>7.1、BigInteger</h3><p><strong>获取大数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigInteger bigInteger1 = BigInteger.valueOf(<span class="number">100</span>);   <span class="comment">// 通过数值</span></span><br><span class="line">BigInteger bigInteger2 = <span class="keyword">new</span> BigInteger(<span class="string">&quot;100&quot;</span>);     <span class="comment">// 通过构造方法</span></span><br></pre></td></tr></table></figure><p><strong>运算：</strong>大数运算并不能和普通的数一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">abs</span><span class="params">()</span>              <span class="comment">// 绝对值的 BigInteger。 </span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">BigInteger <span class="title">add</span><span class="params">(BigInteger val)</span>       <span class="comment">// this + val </span></span></span><br><span class="line"><span class="function">BigInteger <span class="title">subtract</span><span class="params">(BigInteger val)</span>  <span class="comment">// this - val</span></span></span><br><span class="line"><span class="function">BigInteger <span class="title">multiply</span><span class="params">(BigInteger val)</span>  <span class="comment">// this * val</span></span></span><br><span class="line"><span class="function">BigInteger <span class="title">divide</span><span class="params">(BigInteger val)</span>    <span class="comment">// 除，只保留整数</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">BigInteger <span class="title">sqrt</span><span class="params">(BigInteger val)</span>      <span class="comment">// 平方根</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BigInteger</span><span class="params">(BigInteger val)</span>       <span class="comment">// 比较大小</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">BigInteger <span class="title">remainder</span><span class="params">(BigInteger val)</span>            <span class="comment">// 求余</span></span></span><br><span class="line"><span class="function">BigInteger[] <span class="title">divideAndRemainder</span><span class="params">(BigInteger val)</span> <span class="comment">// 返回数组 </span></span></span><br><span class="line"><span class="function">BigInteger <span class="title">pow</span><span class="params">(<span class="keyword">int</span> exponent)</span>    <span class="comment">// 返回其值为 (thisexponent) 的 BigInteger。    </span></span></span><br></pre></td></tr></table></figure><h3 id="7-2、BigDecimal"><a href="#7-2、BigDecimal" class="headerlink" title="7.2、BigDecimal"></a>7.2、BigDecimal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(<span class="keyword">double</span> val)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(String val)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">static</span> BigDecimal <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> val)</span>           <span class="comment">// 根据long获得</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> BigDecimal <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> val,<span class="keyword">int</span> scale)</span> <span class="comment">// 参数依次为3,1  则结果 3.0    </span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> BigDecimal <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> val)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">// 加减乘除    </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">add</span><span class="params">(BigDecimal augend)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">subtract</span><span class="params">(BigDecimal subtrahend)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">multiply</span><span class="params">(BigDecimal multiplicand)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">divide</span><span class="params">(BigDecimal divisor, <span class="keyword">int</span> scale, <span class="keyword">int</span> roundingMode)</span></span></span><br></pre></td></tr></table></figure><h2 id="8、数组"><a href="#8、数组" class="headerlink" title="8、数组"></a>8、数组</h2><h3 id="8-1、概念"><a href="#8-1、概念" class="headerlink" title="8.1、概念"></a>8.1、概念</h3><ol><li>数组(Array)，是多个<strong>相同类型数据</strong>按一定顺序排列 的集合，并使用一个名字命名，并通过<strong>编号的方式管理</strong></li><li>数组本身是引用数据类型，而数组中的元素可以是任何数据类型</li><li>数据占用连续的空间地址，长度一旦确定，就<strong>不能修改</strong></li></ol><h3 id="8-2、创建数组"><a href="#8-2、创建数组" class="headerlink" title="8.2、创建数组"></a>8.2、创建数组</h3><p><strong>声明：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[];  <span class="comment">// 注意：声明数组时不能指定其长度</span></span><br><span class="line"><span class="keyword">int</span>[] a;  <span class="comment">// 这两种方式都可以</span></span><br></pre></td></tr></table></figure><p><strong>初始化</strong></p><ul><li><p><strong>动态初始化：</strong>初始化完毕再赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>]; arr[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">String names[];   names = <span class="keyword">new</span> String[<span class="number">3</span>];  names[<span class="number">0</span>] = “钱学森”;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态初始化：</strong>初始化时就赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123; <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>&#125;;  </span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>注意：</p><ul><li>Java允许有长度为0的数组，与null不同</li><li>定义并<strong>用运算符new为之分配空间</strong>后，才可以引用数组中的每个元素</li><li>数组是引用类型，<strong>它的元素相当于类的成员变量</strong>，因此数组一经分配空间，其中的每个元素也被按照成员变量同样的方式被隐式初始化，初始化默认值不尽相同。<strong>默认值 基本类型大部分为0，引用类型为null</strong></li></ul><h3 id="8-3、访问数组"><a href="#8-3、访问数组" class="headerlink" title="8.3、访问数组"></a>8.3、访问数组</h3><ul><li>for循环</li><li>for each循环</li><li>Arrays.toString(a) 方法把数组转换成 [1,2,3] 这种形式的字符串</li></ul><h3 id="8-4、数组拷贝"><a href="#8-4、数组拷贝" class="headerlink" title="8.4、数组拷贝"></a>8.4、数组拷贝</h3><ul><li>调用 Arrays.copyOf ，这样新数组与原数组就没有关系了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] a = Arrays.copyOf(b,<span class="number">3</span>);  <span class="comment">// 参数2为新数组长度</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">System.out.println(a[<span class="number">0</span>]);</span><br><span class="line">System.out.println(b[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h3 id="8-5、数组排序"><a href="#8-5、数组排序" class="headerlink" title="8.5、数组排序"></a>8.5、数组排序</h3><p>对应数值型的数组，可以使用 Arrays.sort() 进行排序，算法为<strong>优化的快排</strong></p><h3 id="8-6、多维数组"><a href="#8-6、多维数组" class="headerlink" title="8.6、多维数组"></a>8.6、多维数组</h3><ul><li><p>从数组底层的运行机制来看，其实<strong>没有</strong>多维数组。</p></li><li><p>二维数组[][]：数组中的数组</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态初始化：规则数组</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 动态初始化：不规则数组</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>][]; arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 静态初始化</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">7</span>&#125;,&#123;<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="8-7、Arrays工具类"><a href="#8-7、Arrays工具类" class="headerlink" title="8.7、Arrays工具类"></a>8.7、Arrays工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span>[] b)</span>   <span class="comment">//  判断相等</span></span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">(<span class="keyword">int</span>[] a)</span>          </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> val)</span>        <span class="comment">// 指定值添加到数组</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span>                <span class="comment">// 排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> key)</span> <span class="comment">// 对排序后的数组进行二分法检索指定的值</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copyOf</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> end)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copyOf</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span> </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2021/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
      <url>/2021/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="1-初识数据库"><a href="#1-初识数据库" class="headerlink" title="1.初识数据库"></a>1.初识数据库</h1><h2 id="1-1、数据库基本概念"><a href="#1-1、数据库基本概念" class="headerlink" title="1.1、数据库基本概念"></a>1.1、数据库基本概念</h2><ul><li><p><strong>数据库</strong>（DB，DataBase）：相关互联的数据集合</p></li><li><p><strong>数据库管理系统</strong>（DBMS）：数据库系统核心部分，位于用户和os之间</p></li><li><p><strong>数据库系统</strong>（DBS）：由DB、DBMS、应用系统、DBA（数据库管理员）组成</p></li><li><p><strong>数据库应用系统</strong>（DBAS）：实现业务逻辑的应用程序</p></li></ul><h2 id="1-2、数据库分类"><a href="#1-2、数据库分类" class="headerlink" title="1.2、数据库分类"></a>1.2、数据库分类</h2><p><strong>关系型数据库</strong>：(SQL)</p><ul><li>代表：MySQL、Oracle、SQL Server</li><li>通过表和表、行和列之间的关系进行数据库的存储</li></ul><p> <strong>非关系型数据库</strong>：(NoSQL) Not Only</p><ul><li><p>代表：Redis、MongDB</p></li><li><p>特点：对象存储</p></li></ul><h2 id="1-3、数据模型"><a href="#1-3、数据模型" class="headerlink" title="1.3、数据模型"></a>1.3、数据模型</h2><blockquote><p><strong>根据抽象级别定义4种模型</strong></p></blockquote><ul><li><p><strong>概念模型：</strong>从用户角度描述数据库整体结构，现在常用E-R图表示</p><p>实体间联系：1对1、1对多、多对多</p></li><li><p><strong>逻辑模型：</strong>表达数据库逻辑结构，包括层次模型、网状模型、关系模型</p></li><li><p><strong>外部模型：</strong>逻辑模型的一个逻辑子集，根据业务特点设计</p></li><li><p><strong>内部模型：</strong>又称物理模型，描述在磁盘的存储方式</p></li></ul><blockquote><p><strong>关系模型</strong></p></blockquote><p><strong>概念：</strong>包括 数据结构、数据操作、数据的完整性约束</p><ul><li>关系型数据模型的数据结构<ul><li>关系：一个关系就是<strong>一张规范的二维表</strong>，表中的每一列<strong>不可再分</strong>（不能有表中表）</li><li>元组：表中的一行</li><li>主键：能唯一识别元组的最小属性集合，<strong>只能有一个</strong></li><li>候选键：可以有多个，和主键一样非空唯一</li><li>属性：表中的一列即为一个属性，每个属性有一个属性名</li><li>域：列（属性）的取值范围</li><li>关系模式：关系名即表名（属性1，属性2……，属性n）</li></ul></li><li>关系数据库模型的操作：增删改查</li><li>完整性约束<ul><li>实体完整性：主键不能为null</li><li>参照完整性：外键为空或为被参照关系中主键的某个值</li><li>用户定义完整性</li></ul></li></ul><h2 id="1-4、数据库体系结构"><a href="#1-4、数据库体系结构" class="headerlink" title="1.4、数据库体系结构"></a>1.4、数据库体系结构</h2><ul><li>外模式（子模式、用户模式）：又称用户<strong>视图</strong>，用户能直接看到，可以有多个</li><li>概念模式（模式、逻辑模式）：数据库全体数据的逻辑结构和特征的描述，只能有一个</li><li>内模式（存储、物理模式）：物理结构和存储方式的描述，只能有一个</li></ul><p><strong>数据独立性</strong>：</p><ul><li>物理独立性：内模式—–概念模式实现，程序和数据的独立</li><li>逻辑独立性：外模式—–概念模式实现，程序和逻辑的独立</li></ul><h2 id="1-5、SQL语言组成"><a href="#1-5、SQL语言组成" class="headerlink" title="1.5、SQL语言组成"></a>1.5、SQL语言组成</h2><ul><li><strong>数据定义语言DDL：</strong>数据定义语句，定义、修改、删除数据库中的对象<ul><li>包括CREATE、ALTER、DROP、RENAME以及删除TRUNCATE</li></ul></li><li><strong>数据操纵语言DML：</strong>数据操纵语句，增删改查</li><li><strong>数据控制语言DCL：</strong>数据控制语句，定义用户的访问权限和安全级别<ul><li>事务：ROLLBACK、COMMIT、SAVEPOINT</li><li>权限管理：GRANT、REMOVE</li><li>锁定数据库表实现并发控制：LOCKTABLE</li></ul></li></ul><blockquote><p>DCL</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span>      <span class="comment">-- 授予访问权限</span></span><br><span class="line"><span class="keyword">REVOKE</span>     <span class="comment">-- 撤销访问权限</span></span><br><span class="line"><span class="keyword">COMMIT</span>     <span class="comment">-- 提交事务处理</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>   <span class="comment">-- 事务处理回退</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span>  <span class="comment">-- 设置保存点</span></span><br><span class="line">LOCK       <span class="comment">-- 对数据库的特定部分进行锁定</span></span><br></pre></td></tr></table></figure><h2 id="1-6、安装mysql"><a href="#1-6、安装mysql" class="headerlink" title="1.6、安装mysql"></a>1.6、安装mysql</h2><p>Sqlyog创建数据库：选utf-8和utf8_general_ci   创建表：引擎选InnoDB</p><ol><li><p>配置环境变量</p></li><li><p>创建my.ini文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir=D:\mysql-5.7.33\</span><br><span class="line">datadir=D:\mysql-5.7.33\data\</span><br><span class="line">port=3306</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure></li><li><p>管理员运行DOC窗口转到bin目录下</p></li><li><p>输入mysqld -install安装</p></li><li><p>输入mysqld –initialize-insecure –console</p></li><li><p>输入net start mysql启动mysql</p></li><li><p>输入mysql -uroot -p     进入mysql</p></li><li><p>输入update mysql.user set authentication_string=password(‘123456’) where user=’root’and Host=’localhost’;       修改密码</p></li><li><p>输入flush privileges; 刷新权限</p></li><li><p>net stop mysql</p></li><li><p>net start mysql</p></li></ol><h1 id="2-数据库基础概念"><a href="#2-数据库基础概念" class="headerlink" title="2.数据库基础概念"></a>2.数据库基础概念</h1><h2 id="2-1、数据库列类型"><a href="#2-1、数据库列类型" class="headerlink" title="2.1、数据库列类型"></a>2.1、数据库列类型</h2><blockquote><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a><strong>整型</strong></h4></blockquote><ul><li>tinyint：        很小的数据  1字节</li><li>smallint：     较小数据   2字节</li><li>mediumint：中等大小   3字节</li><li>int：              标准整数   4字节</li><li>bigint：         较大的数据  8字节</li></ul><blockquote><p><strong>小数</strong></p></blockquote><ul><li>float：           浮点数    4字节</li><li>double</li><li>decimal          字符串形式浮点数 金融计算的时候一般是使用decaimal</li></ul><blockquote><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h4></blockquote><ul><li>char         字符串固定大小   0~255</li><li>varcahr    可变字符串           0~6535</li><li>tingtext   微型文本                2^8-1</li><li>text          文本串                   2^16-1</li></ul><blockquote><p><strong>二进制字符串</strong></p></blockquote><ul><li>binary</li><li>varbinary</li></ul><blockquote><h4 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h4></blockquote><ul><li>date           YYYY-MM-DD         日期</li><li>time           HH：mm：ss       时间格式</li><li>datatime         日期时间(最常用)</li><li>timestamp      时间戳，1970.1.1到现在的毫秒数</li><li>year                 年份表示</li></ul><blockquote><h4 id="4、Null"><a href="#4、Null" class="headerlink" title="4、Null"></a>4、Null</h4></blockquote><ul><li>没有值</li></ul><h2 id="2-2、数据库的字段属性"><a href="#2-2、数据库的字段属性" class="headerlink" title="2.2、数据库的字段属性"></a>2.2、数据库的字段属性</h2><ul><li><p>Unsigned： 无符号<strong>整数</strong>，不能为负数</p></li><li><p>Zerofill：  不足的位数使用0来填充</p></li><li><p>自增：   自动在上一条记录的基础上+1，必须整数类型，可以设计起始值和步长</p></li><li><p>非空：   </p></li><li><p>默认：   默认值</p></li></ul><h2 id="2-3、数据库表的类型"><a href="#2-3、数据库表的类型" class="headerlink" title="2.3、数据库表的类型"></a>2.3、数据库表的类型</h2><table><thead><tr><th></th><th>MYISAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间大小</td><td>较小</td><td>较大，约为2倍</td></tr></tbody></table><ul><li>MYISAM：节约空间，速度较快</li><li>INNODB：安全性高，支持事务处理</li></ul><blockquote><p>在物理空间的位置：</p></blockquote><p><strong>所有数据库文件都在data目录下，一个文件夹对应一个数据库，本质还是文件的存储</strong></p><p><strong>INNODB：</strong></p><ul><li>数据库表中只有一个*.frm文件，以及上级目录的ibdata1文件</li></ul><p><strong>MYISAM：</strong></p><ul><li>*.frm： 表数据库的定义文件</li><li>*.MYD：数据文件</li><li>*.MYI： 索引文件</li></ul><blockquote><p>设置数据库的字节编码：</p></blockquote><p>charest=utf8</p><p>不设置会中文乱码</p><h2 id="2-4、MySQL常用函数"><a href="#2-4、MySQL常用函数" class="headerlink" title="2.4、MySQL常用函数"></a>2.4、MySQL常用函数</h2><h3 id="1、MySQL常量"><a href="#1、MySQL常量" class="headerlink" title="1、MySQL常量"></a>1、MySQL常量</h3><ul><li>字符串：         单引号’ ‘ 或双引号”   “</li><li>数值：             直接用</li><li>日期和时间： 单引号’ ‘ </li><li>布尔                 1表示true   0表示false</li><li>NULL                NULL参与运算，结果仍为NULL</li></ul><h3 id="2、常用函数"><a href="#2、常用函数" class="headerlink" title="2、常用函数"></a>2、常用函数</h3><blockquote><p>数学运算</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>)            <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>)       <span class="comment">-- 下上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>)         <span class="comment">-- 向下</span></span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">45.926</span>, <span class="number">2</span>)   <span class="comment">-- 四舍五入 45.3</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">1600</span>, <span class="number">300</span>)     <span class="comment">-- 求余数 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> RAND()             <span class="comment">-- 0~1的绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> SIGN(<span class="number">10</span>)           <span class="comment">-- 判断符号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">3.14159</span>,<span class="number">2</span>)  <span class="comment">-- 截取前面2位</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>()                       <span class="comment">-- 小写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>()                       <span class="comment">-- 大写</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>()                 <span class="comment">-- 长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;是&#x27;</span>)              <span class="comment">-- 拼接字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;HelloWorld&#x27;</span>,<span class="number">1</span>,<span class="number">5</span>)      <span class="comment">-- 截取字符串,第1个开始截取5个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;我爱学习&#x27;</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="string">&#x27;不&#x27;</span>)    <span class="comment">-- 替换字符串，返回  我不习</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;wzh&#x27;</span>,<span class="string">&#x27;h&#x27;</span>)              <span class="comment">-- 返回h第一次出现的索引</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;坚持学习&#x27;</span>,<span class="string">&#x27;学习&#x27;</span>,<span class="string">&#x27;吃&#x27;</span>) <span class="comment">-- 替换</span></span><br></pre></td></tr></table></figure><blockquote><p>时间和日期</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>()    <span class="comment">-- 当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE()         <span class="comment">-- 当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> NOW()             <span class="comment">-- 当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>()       <span class="comment">-- 本地时间</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE()         <span class="comment">-- 系统时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW())       <span class="comment">-- 年份</span></span><br></pre></td></tr></table></figure><h3 id="3、聚合函数"><a href="#3、聚合函数" class="headerlink" title="3、聚合函数"></a>3、聚合函数</h3><ul><li>COUNT()  计数  //不会忽略null值</li><li>SUM()   求和</li><li>AVG()   p平均值</li><li>MAX()   最大值</li><li>MIN()   最小值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不能在where中使用，可以在having中使用</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(id) <span class="keyword">FROM</span> student         <span class="comment">-- 会忽略NULL值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student          <span class="comment">-- 不会忽略NULL值，本质是计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> student          <span class="comment">-- 不会忽略NULL值，本质是计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(age) <span class="keyword">AS</span> 年龄 <span class="keyword">FROM</span> student   <span class="comment">-- 计算总和</span></span><br></pre></td></tr></table></figure><h3 id="4、MD5加密"><a href="#4、MD5加密" class="headerlink" title="4、MD5加密"></a>4、MD5加密</h3><p>MD5加密是<strong>不可逆</strong>的过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">插入后加密：</span><br><span class="line">UPDATE student <span class="keyword">SET</span> `pwd` <span class="operator">=</span> MD5(`pwd`) <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">插入时加密：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (id,`name`,`pwd`,`sex`)<span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="string">&#x27;李三啊&#x27;</span>,MD5(<span class="number">1258</span>),<span class="string">&#x27;男&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>检验：</strong>将用户传递进来的密码，进行MD5加密然后对比加密的值</p><h1 id="3-DDL结构化语句"><a href="#3-DDL结构化语句" class="headerlink" title="3.DDL结构化语句"></a>3.DDL结构化语句</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>   <span class="comment">-- 创建数据库表</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>    <span class="comment">-- 更改表结构、添加、删除、修改列长度</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span>     <span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX   <span class="comment">-- 在表上建立索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX     <span class="comment">-- 删除索引</span></span><br></pre></td></tr></table></figure><h2 id="3-1、DDL之创建数据库"><a href="#3-1、DDL之创建数据库" class="headerlink" title="3.1、DDL之创建数据库"></a>3.1、DDL之创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Show</span> databases;             <span class="comment">-- 展示所有数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> school;    <span class="comment">-- 创建school数据库</span></span><br><span class="line">USE school;                 <span class="comment">-- 使用school数据库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE school;       <span class="comment">-- 删除数据库</span></span><br></pre></td></tr></table></figure><h2 id="3-2、DDL之创建表"><a href="#3-2、DDL之创建表" class="headerlink" title="3.2、DDL之创建表"></a>3.2、DDL之创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (          <span class="comment">-- 创建student表</span></span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,  <span class="comment">-- 自增</span></span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;张三&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`pwd` <span class="type">VARCHAR</span>(<span class="number">20</span>),              <span class="comment">-- COMMENT  </span></span><br><span class="line">`sex` <span class="type">VARCHAR</span>(<span class="number">2</span>),               <span class="comment">-- DEFAULT 默认值</span></span><br><span class="line">`birthday` DATETIME,            <span class="comment">-- NOT NULL 非空</span></span><br><span class="line">`addrss` <span class="type">VARCHAR</span>(<span class="number">100</span>),          <span class="comment">-- AUTO_INCREMENT 自增</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8            <span class="comment">-- 设置引擎和编码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student2 <span class="keyword">as</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student    <span class="comment">-- 子查询创建表</span></span><br><span class="line">USE student;                                      <span class="comment">-- 选择student表</span></span><br></pre></td></tr></table></figure><h2 id="3-3、DDL之表的修改"><a href="#3-3、DDL之表的修改" class="headerlink" title="3.3、DDL之表的修改"></a>3.3、DDL之表的修改</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表添加列（字段）</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> age <span class="type">INT</span>(<span class="number">3</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;18&#x27;</span> COMMENT <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> studtnet          <span class="comment">-- 删除student表，表结构不在</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> student       <span class="comment">-- 截断student表，表结构仍在</span></span><br><span class="line">                                       <span class="comment">-- 注意截断的表不能回滚，删除的可以</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">DROP</span> age1        <span class="comment">-- 删除字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` RENAME <span class="keyword">AS</span> s               <span class="comment">-- 重命名表名 </span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">to</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` CHANGE age age1 <span class="type">INT</span>(<span class="number">2</span>)    <span class="comment">-- 重命名字段名,必须指定类型和大小</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` MODIFY age <span class="type">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;18&#x27;</span> COMMENT <span class="string">&#x27;年龄&#x27;</span> </span><br></pre></td></tr></table></figure><h2 id="3-4、数据约束"><a href="#3-4、数据约束" class="headerlink" title="3.4、数据约束"></a>3.4、数据约束</h2><p><strong>注意到：</strong>创建表之后字段后面跟的一大堆就是对字段的约束</p><ul><li>为了保证数据的一致性和完整性，SQL规范以约束的方式对表数据进行额外的条件限制</li><li>约束是表级的强制规定</li><li>可以在创建表时规定约束、或者在表创建之后</li></ul><p><strong>六种约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">NOT</span> <span class="keyword">NULL</span>       <span class="comment">-- 非空约束，规定某个字段不能为空</span></span><br><span class="line"><span class="keyword">UNIQUE</span>         <span class="comment">-- 唯一约束，规定某个字段在整个表中是唯一的</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY    <span class="comment">-- 主键(非空且唯一) </span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY    <span class="comment">-- 外键</span></span><br><span class="line"><span class="keyword">CHECK</span>          <span class="comment">-- 检查约束  -- 可以使用但是mysql没有效果</span></span><br><span class="line"><span class="keyword">DEFAULT</span>        <span class="comment">-- 默认值</span></span><br></pre></td></tr></table></figure><p><strong>分类：</strong></p><ul><li>列级：只能约束单个字段</li><li>表级：可以约束多个字段</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- not null 非空约束</span></span><br><span class="line">id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>                                <span class="comment">-- 建表时添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp MODIFY sex <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;   <span class="comment">-- 增加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp MODIFY sex <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span>;       <span class="comment">-- 取消约束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- UNIQUE 唯一约束默认创建唯一索引，注意不同字段直接可以重复</span></span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>;</span><br><span class="line"><span class="keyword">CONSTRAINT</span> uk_name_pwd <span class="keyword">UNIQUE</span>(NAME)                 <span class="comment">-- 建表时添加，用户名不能重复</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(NAME,PASSWORD);         <span class="comment">-- 增加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uk_name_pwd <span class="keyword">UNIQUE</span>(NAME,PASSWORD);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> MODIFY NAME <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">DROP</span> INDEX uk_name_pwd;   <span class="comment">-- 删除约束,没自定义名字的话为字段名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键约束 一个表只能有一个</span></span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT        <span class="comment">-- 建表时添加主键</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> id <span class="keyword">PRIMARY</span> KEY(id,name)         <span class="comment">-- 表级才能定义多个子弹和定义别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;               <span class="comment">-- 删除约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(name,pwd);      <span class="comment">-- 添加约束，已存在就不能添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> MODIFY id <span class="type">INT</span>(<span class="number">2</span>) <span class="keyword">PRIMARY</span> KEY;   <span class="comment">-- 修改约束，已存在就不能修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- FOREIGN KEY 外键约束</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (`gradeid`) REFERNECES `grade`(`id`)   <span class="comment">-- 关联年级表(grade)的id字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> 加上                      <span class="comment">-- 添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY emp_dept_id_fk;   <span class="comment">-- 删除外键</span></span><br></pre></td></tr></table></figure><blockquote><p>总结</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- not null  default</span></span><br><span class="line">id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">20</span>;                    <span class="comment">-- 建表时添加</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp MODIFY sex <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;   <span class="comment">-- MODIFY修改字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键 PRIMARY KEY、唯一约束 UNIQUE</span></span><br><span class="line">id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">UNIQUE</span><span class="operator">/</span><span class="keyword">PRIMARY</span>;     <span class="comment">-- 建表时列级范围添加</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY<span class="operator">/</span><span class="keyword">UNIQUE</span>(name,pwd);  <span class="comment">-- 建表时标记范围添加  取别名 CONSTRAINT 名字 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">ADD</span> 形式<span class="number">2</span>;         <span class="comment">-- ADD添加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> MODIFY 形式<span class="number">1</span>;      <span class="comment">-- MODIFY修改字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">DROP</span> INDEX 约束名称;       <span class="comment">-- DROP删除约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 外键</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (`gradeid`) REFERNECES `grade`(`id`)   <span class="comment">-- 关联年级表(grade)的id字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> 加上第二句                 <span class="comment">-- 添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 约束名称;</span><br></pre></td></tr></table></figure><h2 id="3-5、索引"><a href="#3-5、索引" class="headerlink" title="3.5、索引"></a>3.5、索引</h2><h3 id="1、索引"><a href="#1、索引" class="headerlink" title="1、索引"></a>1、索引</h3><p><strong>优点：</strong>索引是一种对数据库的某一列、或者多列的值进行排序的存储结构。索引相当于一本书中的目录，通过目录可以快速定位到某一节的内容，而不用一页一页的翻阅查找。</p><p><strong>缺点：</strong>会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。</p><h3 id="2、索引分类"><a href="#2、索引分类" class="headerlink" title="2、索引分类"></a>2、索引分类</h3><ul><li><strong>主键索引 PRIMARY KEY</strong>： 自动创建，主键不可重复，只能有一个列作为主键</li><li><strong>唯一索引 UNIQUE KEY：</strong>可以有多个，索引列本列的值是唯一的，为可以空</li><li><strong>普通索引 KEY/INDEX ：</strong></li><li><strong>全文索引FULLTEXT ：</strong>特定的数据库引擎才有</li></ul><h3 id="3、使用索引"><a href="#3、使用索引" class="headerlink" title="3、使用索引"></a>3、使用索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 普通索引</span></span><br><span class="line">INDEX sex1(sex)                      <span class="comment">-- 建表时为sex添加索引sex1</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX sex1 <span class="keyword">ON</span> student(sex)    <span class="comment">-- 为student表的sex创建索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> 上述形式      <span class="comment">-- 通过修改表结构增加索引</span></span><br><span class="line">                                      </span><br><span class="line"><span class="comment">-- 唯一索引</span></span><br><span class="line"><span class="keyword">UNIQUE</span> sex(sex)                      <span class="comment">-- 索引名可以省略</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX sex <span class="keyword">ON</span> student(sex)</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> 密码(pwd)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全文索引把 UNIQUE 改成 FULLTEXT 即可</span></span><br><span class="line"><span class="comment">--EXPLAIN分析sql执行的情况</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> student                             <span class="comment">--非全文索引</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(id) AGAINST(<span class="number">1</span>) <span class="comment">--全文索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看和删除索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student              <span class="comment">-- 查看索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX sex <span class="keyword">ON</span> student            <span class="comment">-- 删除索引</span></span><br></pre></td></tr></table></figure><h3 id="4、组合索引"><a href="#4、组合索引" class="headerlink" title="4、组合索引"></a>4、组合索引</h3><p>在多个列中创建索引，使用组合索引时遵循最左匹配原则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> INDEX index_name(id,age,name);</span><br></pre></td></tr></table></figure><h3 id="5、索引失效问题"><a href="#5、索引失效问题" class="headerlink" title="5、索引失效问题"></a>5、索引失效问题</h3><ol><li>like 以%开头，索引无效；当like前缀没有%，后缀有%时，索引有效</li><li>or语句前后没有同时使用索引</li><li>组合索引，若使用后面的而没有使用前面的字段，索引失效。如 (A,B,C) 使用到B，则必须使用了A 索引才会生效。</li><li>数据类型出现隐式转化。如varchar不加单引号的话可能会自动转换为int型，使索引无效，产生全表扫描。</li><li>在索引字段上使用not，&lt;&gt;，!=。不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。</li><li>对索引字段进行计算操作、字段上使用函数。</li><li>当全表扫描速度比索引速度快时，mysql会使用全表扫描，此时索引失效。</li></ol><h1 id="4-DML增删改查"><a href="#4-DML增删改查" class="headerlink" title="4.DML增删改查"></a>4.DML增删改查</h1><h2 id="4-1、DML语言之增删改"><a href="#4-1、DML语言之增删改" class="headerlink" title="4.1、DML语言之增删改"></a>4.1、DML语言之增删改</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 增</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id,name,pwd,sex)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;wzh&#x27;</span>,<span class="number">123456</span>,<span class="string">&#x27;男&#x27;</span>)   </span><br><span class="line"><span class="comment">-- 增加操作，可以只增加部分值，剩下的不写，或者写NULL</span></span><br><span class="line"><span class="comment">-- 插入的值 可以用子查询的数据替代</span></span><br><span class="line"><span class="comment">-- 插入的数据可以用 NOW() 等函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 改</span></span><br><span class="line">UPDATE student <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;zk&#x27;</span>,pwd<span class="operator">=</span><span class="number">234</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>                </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>                     <span class="comment">-- 清空表后自增列不变</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="number">9</span><span class="operator">+</span><span class="number">2</span>)          <span class="comment">-- 可以利用子查询删除</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> student                     <span class="comment">-- 清空表会重新设置自增列，不会影响事务</span></span><br></pre></td></tr></table></figure><p> DELETE删除后重启数据库：    </p><ul><li>INNODB：自增列从1开始(存在内存中)</li><li>MYISAM：继续从上一个自增量开始</li></ul><h2 id="3-3、DML语言之查"><a href="#3-3、DML语言之查" class="headerlink" title="3.3、DML语言之查"></a>3.3、DML语言之查</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [ <span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span> <span class="operator">|</span> DISTINCTROW <span class="operator">|</span> TOP ] </span><br><span class="line">&#123;<span class="operator">*</span><span class="operator">|</span>talbe.<span class="operator">*</span><span class="operator">|</span>[table.]field1[<span class="keyword">AS</span> alias1][,[table.]field2[<span class="keyword">AS</span> alias2][,…]]&#125;   <span class="comment">--- 查的字段</span></span><br><span class="line"><span class="keyword">FROM</span> 表名[<span class="keyword">as</span> 别名]    <span class="comment">-- 从哪些表中选择</span></span><br><span class="line">[<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> 表名<span class="number">2</span> ]  <span class="comment">-- 联合查询</span></span><br><span class="line">[<span class="keyword">IN</span> externaldatabase] </span><br><span class="line">[<span class="keyword">WHERE</span>…]       <span class="comment">--  结果满足的条件</span></span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span>…]    <span class="comment">-- 按照那些字段分组</span></span><br><span class="line">[<span class="keyword">HAVING</span>…]      <span class="comment">-- 过滤分组记录满足的条件</span></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span>…]    <span class="comment">-- 结果排序</span></span><br><span class="line">[limit ]       <span class="comment">-- 分页</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--注意： 必须严格按照顺序来</span></span><br></pre></td></tr></table></figure><blockquote><p>1、查询全部</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `student`</span><br></pre></td></tr></table></figure><blockquote><p>2、查询指定的字段（使用别名）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.`id` <span class="keyword">AS</span> ID <span class="keyword">FROM</span> `student` <span class="keyword">AS</span> s  <span class="comment">-- 字段使用``</span></span><br><span class="line"><span class="keyword">SELECT</span> s.`id` <span class="string">&#x27;ID&#x27;</span> <span class="keyword">FROM</span> `student` `s`    <span class="comment">-- 字段别名&#x27;&#x27;,表取别名``</span></span><br><span class="line"><span class="keyword">SELECT</span> s.id ID <span class="keyword">FROM</span> student s            <span class="comment">-- 不用任何字符</span></span><br></pre></td></tr></table></figure><blockquote><p>3、concat函数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;学号:&#x27;</span>,id) <span class="keyword">AS</span> ID <span class="keyword">FROM</span> student <span class="comment">-- 拼接字符串</span></span><br></pre></td></tr></table></figure><blockquote><p>4、对结果操作</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age<span class="operator">+</span><span class="number">1</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">11</span> </span><br></pre></td></tr></table></figure><blockquote><p>5、去重</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `id` <span class="keyword">FROM</span> student    <span class="comment">-- 使用 DISTINCT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> age,id <span class="keyword">FROM</span> <span class="keyword">USER</span>     <span class="comment">-- DISTINCT作用于所有列，如这里，只有id和age均相同，才会被去重 </span></span><br></pre></td></tr></table></figure><blockquote><p>6、where筛选</p></blockquote><ul><li>算数运算判断：&lt;    &lt;    =   &gt;   &gt;=     !=    =     &lt;&gt;(name &lt;&gt; ‘张三’ 即名字不为张三)</li><li>逻辑比较判断：AND或者&amp;&amp;    OR或者||     NOT或者！</li><li>之间判断：        BETWEEN   AND</li><li>之内判断：       IN</li><li>模糊匹配：       LIKE</li><li>空值判断：       IS   [NOT]  NULL</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- mysql 优先计算And 其次计算 or</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">OR</span> id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">AND</span> age <span class="operator">=</span> <span class="number">18</span> <span class="comment">-- id为6 或者 id为3且age为18</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> (id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">OR</span> id <span class="operator">=</span> <span class="number">3</span>) <span class="keyword">AND</span> age <span class="operator">=</span> <span class="number">18</span>  <span class="comment">-- id为6或3 且 age为18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- MySQL的 NOT 支持对 BETWEEN、IN、EXISTS 搭配使用 </span></span><br></pre></td></tr></table></figure><blockquote><p>7、模糊查询：比较运算符</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">12</span> <span class="comment">-- 查询区间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> NAME <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>      <span class="comment">-- %表示任意字符,表示张....</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> NAME <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;张_&#x27;</span>      <span class="comment">-- _表示一个字符,表示张x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> NAME <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="keyword">IN</span>(<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>)      <span class="comment">-- 查询id为11、12、13之内的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> NAME <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> addrss <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>   <span class="comment">-- 查询address不为空</span></span><br></pre></td></tr></table></figure><blockquote><p>8、使用正则表达式查询</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> NAME REGEXP <span class="string">&#x27;1000&#x27;</span>  <span class="comment">-- 使用正则表达式，匹配包含1000的字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> NAME REGEXP <span class="string">&#x27;1000|2000&#x27;</span>  <span class="comment">--  与</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> NAME REGEXP <span class="string">&#x27;[JT]&#x27;</span>       <span class="comment">-- 字符为J或者T 等于 J|T</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> NAME REGEXP <span class="string">&#x27;[^J]&#x27;</span>       <span class="comment">-- 字符不为J</span></span><br></pre></td></tr></table></figure><blockquote><p>9、相等连接（内连接）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 连接student表和teacher表中id相等的行</span></span><br><span class="line"><span class="keyword">SELECT</span> s.name <span class="keyword">FROM</span> student s,teacher t <span class="keyword">WHERE</span> s.id<span class="operator">=</span>t.id              <span class="comment">-- 使用where</span></span><br><span class="line"><span class="keyword">SELECT</span> s.name <span class="keyword">FROM</span> student s <span class="keyword">INNER</span> <span class="keyword">JOIN</span> teacher t <span class="keyword">ON</span> s.id<span class="operator">=</span>t.id   <span class="comment">-- 使用join连接</span></span><br><span class="line">                          <span class="comment">-- INNER可以省略</span></span><br></pre></td></tr></table></figure><blockquote><p>10、高级连接</p></blockquote><ul><li>左连接：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.name,t.pwd <span class="keyword">FROM</span> student s <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> teacher t <span class="keyword">ON</span> s.id<span class="operator">=</span>t.id</span><br><span class="line"><span class="comment">-- 把student表的所有字段和teacher表的中满足条件的连接起来</span></span><br><span class="line"><span class="comment">-- 没有的字段会显示null</span></span><br><span class="line"><span class="comment">-- 此语句中会显示所有student表中的数据，满足内连接条件的会有t.pwd的值，其他都会显示为null</span></span><br><span class="line"><span class="comment">-- 直接left join也可以</span></span><br></pre></td></tr></table></figure><ul><li>右连接：左连接反过来</li><li>全连接：MySQL目前不支持</li><li>自连接</li></ul><blockquote><p>11、子查询:where语句中嵌套select语句，最多嵌套255层</p></blockquote><ul><li>返回单值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.name <span class="keyword">FROM</span> student s <span class="keyword">WHERE</span> s.id <span class="operator">=</span> (<span class="keyword">SELECT</span> t.id <span class="keyword">FROM</span> teacher t <span class="keyword">WHERE</span> t.name<span class="operator">=</span><span class="string">&#x27;李三&#x27;</span>)</span><br><span class="line"><span class="comment">-- &lt;  &gt; 等等</span></span><br></pre></td></tr></table></figure><ul><li><p>返回多值：必须使用多值比较运算符</p><p><strong>IN</strong></p><p><strong>ALL</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.name <span class="keyword">FROM</span> student s <span class="keyword">WHERE</span> s.age <span class="operator">&gt;</span><span class="keyword">ALL</span>(<span class="keyword">SELECT</span> t.age <span class="keyword">FROM</span> teacher t <span class="keyword">WHERE</span> t.id<span class="operator">&gt;</span><span class="number">3</span>)                         <span class="comment">-- s.age必须大于所有返回的结果</span></span><br></pre></td></tr></table></figure><p><strong>ANY</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.name <span class="keyword">FROM</span> student s <span class="keyword">WHERE</span> s.age <span class="operator">&gt;</span><span class="keyword">ANY</span>(<span class="keyword">SELECT</span> t.age <span class="keyword">FROM</span> teacher t <span class="keyword">WHERE</span> t.id<span class="operator">&gt;</span><span class="number">3</span>)                         <span class="comment">-- s.age大于其中某一个即可</span></span><br></pre></td></tr></table></figure><p><strong>EXISTS</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">-- 将外查询表的每一行，代入内查询作为检验，如果内查询返回的结果取非空值，则EXISTS子句返回TRUE，这一行行可作为外查询的结果行，否则不能作为结果。</span></span><br><span class="line"><span class="keyword">SELECT</span> s.age <span class="keyword">FROM</span> student s <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher t <span class="keyword">WHERE</span> s.id<span class="operator">=</span>t.id)</span><br></pre></td></tr></table></figure></li></ul><p><strong>子查询的作用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">AS</span> id)                  <span class="comment">-- 过滤数据 </span></span><br><span class="line"><span class="keyword">SELECT</span> id,NAME,(<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> o <span class="keyword">WHERE</span> o.id <span class="operator">=</span> c.id) <span class="keyword">FROM</span> c <span class="comment">-- 作为计算字段</span></span><br></pre></td></tr></table></figure><blockquote><p>12.合并查询结果</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 语句<span class="number">1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> 语句<span class="number">2</span></span><br><span class="line"><span class="comment">-- 语句1和语句2查询的结果必须完全一致，Union自动去重</span></span><br><span class="line"><span class="comment">-- 只能使用一条order by 语句且在最后一条语句后面</span></span><br></pre></td></tr></table></figure><blockquote><p>13、分组过滤：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,name,pwd <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> name,id <span class="keyword">HAVING</span> id <span class="operator">&gt;</span><span class="number">4</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"><span class="comment">-- 所有相同的name的分成一组，每组的结果只选第一个</span></span><br><span class="line"><span class="comment">-- 可以按照多列分组</span></span><br><span class="line"><span class="comment">-- having只能和group by 一直使用，作用是进一步筛选</span></span><br><span class="line"><span class="comment">-- 通常配合聚合函数使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 配合聚合函数</span></span><br></pre></td></tr></table></figure><blockquote><p>14、排序</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">ASC</span>   <span class="comment">--  升序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">DESC</span>  <span class="comment">--  降序</span></span><br></pre></td></tr></table></figure><blockquote><p>15、分页</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">ASC</span> LIMIT <span class="number">10</span>,<span class="number">3</span>  <span class="comment">-- 从第11行开始显示，每页3个数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">ASC</span> LIMIT <span class="number">10</span>    <span class="comment">-- 前10条语句</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">ASC</span> LIMIT <span class="number">10</span> <span class="keyword">OFFSET</span> <span class="number">3</span>; <span class="comment">-- 相当于 limit 3,10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">ASC</span> LIMIT <span class="number">10</span>,<span class="number">-1</span>  <span class="comment">-- 检索到最后一条数据</span></span><br></pre></td></tr></table></figure><h1 id="5-DCL：事务"><a href="#5-DCL：事务" class="headerlink" title="5.DCL：事务"></a>5.DCL：事务</h1><h2 id="5-1、事务原则"><a href="#5-1、事务原则" class="headerlink" title="5.1、事务原则"></a>5.1、事务原则</h2><ul><li>原子性：要么都成功，要么都失败</li><li>一致性：事务执行前后都满足**数据库的完整性约束 **，如A、B转账前后总和不变</li><li>隔离性：多个事务互不影响</li><li>持久性：事务完成后，持久化</li></ul><h2 id="5-2、手动执行事务"><a href="#5-2、手动执行事务" class="headerlink" title="5.2、手动执行事务"></a>5.2、手动执行事务</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>   <span class="comment">-- 关闭事务，MySQL时默认开始事务提交的，要手动操作必须先关闭事务</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>   <span class="comment">-- 开启事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> TRANSACTION    <span class="comment">-- 事务开始</span></span><br><span class="line"><span class="keyword">COMMIT</span>               <span class="comment">-- 事务提交，一旦提交就持久化了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SAVEPOINT</span> 保存点名               <span class="comment">-- 记录保存点，可以回滚到改点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名   <span class="comment">-- 回滚</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名       <span class="comment">-- 撤销保存点名</span></span><br></pre></td></tr></table></figure><h2 id="5-3、并发问题"><a href="#5-3、并发问题" class="headerlink" title="5.3、并发问题"></a>5.3、并发问题</h2><ul><li><strong>读脏数据：</strong>     事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li><li><strong>不可重复读：</strong> 一个事务对同一数据两次读到的<strong>值</strong>不同</li><li><strong>幻影读：</strong>        事务B对表 table 进行读取，在此过程中事务A对表 table 增加了一条数据，事务B修改完毕后发现<strong>还有一条数据没有读取</strong>，好像发生了环境</li></ul><blockquote><p>事务隔离级别</p></blockquote><table><thead><tr><th>级别</th><th>约束</th></tr></thead><tbody><tr><td>READ UNCOMMITTED（未提交读）</td><td>没有限制</td></tr><tr><td>READ COMMITTED（提交读）</td><td>不允许读未提交的数据，但是数据仍然可能在事务结束前被修改</td></tr><tr><td>REPEATABLE READ（可重复读）</td><td>保证一个事务中重复读到的数据保持同样的值，但允许其他用户将新幻影行插入数据集</td></tr><tr><td>SERIALIZABLE（可串行读）</td><td>不允许其他用户在事务完成前更新数据集或者将行插入到数据集</td></tr></tbody></table><table><thead><tr><th>隔离级别</th><th>丢失更新</th><th>读脏数据</th><th>不可重复读</th><th>幻影读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED（未提交读）</td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td>READ COMMITTED（已提交读）</td><td>否</td><td>否</td><td>是</td><td>是</td></tr><tr><td>REPEATABLE READ（可重复度）</td><td>否</td><td>否</td><td>否</td><td>是</td></tr><tr><td>SERIALIZABLE（可串行读）</td><td>否</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置MySQL连接的隔离级别</span></span><br><span class="line"><span class="keyword">set</span> transaction isolation level read committed;</span><br><span class="line"><span class="comment">-- 设置数据库系统的全局的隔离级别</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read committed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE  <span class="comment">-- 设置可串行读</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION    <span class="comment">-- 事务开始</span></span><br><span class="line"><span class="keyword">COMMIT</span>               <span class="comment">-- 事务提交</span></span><br></pre></td></tr></table></figure><h2 id="5-4、封锁"><a href="#5-4、封锁" class="headerlink" title="5.4、封锁"></a>5.4、封锁</h2><p>基本锁</p><ul><li><p>排它锁（写锁）：不能同时写</p></li><li><p>共享锁（读锁）：可以同时读</p><p>为什么可以同时读还要加锁？</p><p>原因：防止读写同时进行，如果不锁就可能发生读脏等</p></li></ul><p>锁的粒度：锁封锁对象的大小</p><p>封锁协议</p><ul><li>一级封锁协议：事务修改前加写锁，结束后解锁。读的事务不加锁</li><li>二级封锁协议：事务修改前加写锁，结束后解锁。事务读前加锁，读后立即释放</li><li>三级封锁协议：事务修改前加写锁，结束后解锁。事务读前加锁，事物结束后才释放</li></ul><p>一级只能防止丢失更新，二级能防止丢失更新和读脏数据，三级能防止丢失更新，读脏数据和不可重复读</p><h2 id="5-5、封锁带来的问题"><a href="#5-5、封锁带来的问题" class="headerlink" title="5.5、封锁带来的问题"></a>5.5、封锁带来的问题</h2><ul><li>饿死：</li><li>活锁：某个事务永远处于等待</li><li>死锁</li></ul><h2 id="5-6、两段锁协议实现可串行化"><a href="#5-6、两段锁协议实现可串行化" class="headerlink" title="5.6、两段锁协议实现可串行化"></a>5.6、两段锁协议实现可串行化</h2><p><strong>两段的含义</strong>：第一阶段获得锁，不能释放锁，第二阶段释放锁，不能获得锁。</p><p>两段锁协议必须遵循以下两条规则：</p><ul><li><p>在对任何数据读写操作之前，事务必须获得锁</p></li><li><p>释放一个锁之后，事务不再获申请得任何其他锁、</p><p>两段锁协议没有要求事务一次将所有要的数据全部枷锁，因此可能发生死锁。</p></li></ul><p><strong>遵循两段锁协议的一次封锁法</strong></p><ul><li>一次封锁法要求每个事务必须一次将所有要使用的数据全部加锁，否则不能继续执行。一次封锁法遵循两段锁协议，可以防止死锁。</li></ul><h2 id="5-7、MySQL的锁实现"><a href="#5-7、MySQL的锁实现" class="headerlink" title="5.7、MySQL的锁实现"></a>5.7、MySQL的锁实现</h2><blockquote><p>表级锁</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Lcok TABLES student READ;    <span class="comment">-- 上锁，读锁 WRITE为写锁</span></span><br><span class="line">UNLOCK <span class="keyword">TABLE</span>;                <span class="comment">-- 解锁</span></span><br></pre></td></tr></table></figure><blockquote><p>行级锁</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION    <span class="comment">-- 事务开始</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> LOCK <span class="keyword">IN</span> SHARE MODE;     <span class="comment">-- 共享锁（读锁）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> UPDATE;             <span class="comment">-- 排他锁（写锁）</span></span><br><span class="line"><span class="comment">-- 增删改语句MySQL会自动加上隐式排它锁</span></span><br><span class="line"><span class="keyword">commit</span>               <span class="comment">---提交后自动解锁</span></span><br></pre></td></tr></table></figure><h1 id="6-DCL：权限管理"><a href="#6-DCL：权限管理" class="headerlink" title="6.DCL：权限管理"></a>6.DCL：权限管理</h1><blockquote><p>用户管理</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> wzh<span class="variable">@localhost</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>    <span class="comment">-- 创建用户wzh，密码123456</span></span><br><span class="line">        <span class="comment">-- @后面是主机名，如果指定了那么创建的用户必须通过该主机连接</span></span><br><span class="line">        <span class="comment">-- 并且修改也必须带上@主机名</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123456&#x27;</span>)                     <span class="comment">-- 修改本机密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> wzh<span class="variable">@localhost</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;1234566&#x27;</span>)  <span class="comment">-- 指定用户修改密码</span></span><br><span class="line">RENAME <span class="keyword">USER</span> wzh<span class="variable">@localhost</span> <span class="keyword">TO</span> wzh                      <span class="comment">-- 更改用户名</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> wzh                                         <span class="comment">-- 删除用户</span></span><br></pre></td></tr></table></figure><blockquote><p>权限管理</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> wzh    <span class="comment">-- 授权对所有表的所有权限给wzh用户</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> school.student <span class="keyword">TO</span> wzh  <span class="comment">--只给school数据库的student表的所有权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> wzh                   <span class="comment">-- 显示用户wzh的权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">FROM</span> wzh <span class="comment">-- 撤销权限</span></span><br></pre></td></tr></table></figure><blockquote><p>角色管理：MySQL8.0新增</p></blockquote><p>如果用户被授予角色权限，则该用户拥有该角色的权限。</p><h1 id="7-备份"><a href="#7-备份" class="headerlink" title="7.备份"></a>7.备份</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导出  导出：多张表不要加逗号，用空格就行</span></span><br><span class="line"><span class="comment">--         主机名                      数据库  表          文件名      </span></span><br><span class="line">mysqldump <span class="operator">-</span>hlocalhost <span class="operator">-</span>uroot <span class="operator">-</span>p123456 school student <span class="operator">&gt;</span>D:<span class="operator">/</span>a.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导入</span></span><br><span class="line">source d:<span class="operator">/</span>a.sql                     <span class="comment">-- 已经登录</span></span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p123456 库名<span class="operator">&lt;</span>备份文件   <span class="comment">-- 未登录</span></span><br></pre></td></tr></table></figure><h1 id="8-三大范式"><a href="#8-三大范式" class="headerlink" title="8.三大范式"></a>8.三大范式</h1><p>三大范式：</p><ul><li>第一范式：保证每一列不可再分</li><li>第二范式：满足第一范式且数据表中的每一列只描述一件事情</li><li>第三范式：每一列数据都和主键直接相关</li></ul><h1 id="9-一些常用命令"><a href="#9-一些常用命令" class="headerlink" title="9.一些常用命令"></a>9.一些常用命令</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE school    <span class="comment">-- 显示数据库的sql语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student      <span class="comment">-- 显示创建表的sql语句</span></span><br><span class="line"><span class="keyword">DESC</span> student                   <span class="comment">-- 显示表结构</span></span><br><span class="line"><span class="keyword">DESCRIBE</span> student               <span class="comment">-- 显示表结构</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/19/hello-world/"/>
      <url>/2021/06/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate asfffaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line">s</span><br><span class="line">s</span><br><span class="line">s</span><br><span class="line">sss</span><br><span class="line">s</span><br><span class="line"></span><br><span class="line">s</span><br><span class="line">s</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
